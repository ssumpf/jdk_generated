#line 1 "dfa_arm.cpp"
//
// Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//

// Machine Generated File.  Do Not Edit!

#include "precompiled.hpp"
#include "adfiles/ad_arm.hpp"
#include "opto/cfgnode.hpp"
#include "opto/intrinsicnode.hpp"
#include "opto/matcher.hpp"
#include "opto/narrowptrnode.hpp"
#include "opto/opcodes.hpp"
#include "opto/convertnode.hpp"

//------------------------- Source -----------------------------------------

//------------------------- Attributes -------------------------------------

// AttributeForm 
static const int op_cost = 1;

// AttributeForm 
static const int ins_cost = DEFAULT_COST;

// AttributeForm 
static const int ins_size = 32;

// AttributeForm 
static const int ins_short_branch = 0;

//------------------------- Macros -----------------------------------------
#define DFA_PRODUCTION(result, rule, cost)\
  _cost[ (result) ] = cost; _rule[ (result) ] = rule;

#define DFA_PRODUCTION__SET_VALID(result, rule, cost)\
  DFA_PRODUCTION( (result), (rule), (cost) ); STATE__SET_VALID( (result) );

//------------------------- DFA --------------------------------------------
// DFA is a large switch with case statements for each ideal opcode encountered
// in any match rule in the ad file.  Each case has a series of if's to handle
// the match or fail decisions.  The matches test the cost function of that
// rule, and prune any cases which are higher cost for the same reduction.
// In order to generate the DFA we walk the table of ideal opcode/MatchList
// pairs generated by the ADLC front end to build the contents of the case
// statements (a series of if statements).


void  State::_sub_Op_RegI(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IREGI, iRegI_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, R0RegI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, R1RegI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, R2RegI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, R3RegI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, R12RegI_rule, c+1)
    }
}
void  State::_sub_Op_RegP(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, sp_ptr_RegP_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP, iRegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0REGP, R0RegP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, R1RegP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, R2RegP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, RExceptionRegP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, RthreadRegP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, IPRegP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, LRRegP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, inline_cache_regP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, interpreter_method_oop_regP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+100)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGP, iRegP_rule, c)	  // overwrites higher cost rule
        DFA_PRODUCTION(R0REGP, R0RegP_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(R1REGP, R1RegP_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(R2REGP, R2RegP_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(REXCEPTIONREGP, RExceptionRegP_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RTHREADREGP, RthreadRegP_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(IPREGP, IPRegP_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(LRREGP, LRRegP_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(INLINE_CACHE_REGP, inline_cache_regP_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(INTERPRETER_METHOD_OOP_REGP, interpreter_method_oop_regP_rule, c+1)	  // overwrites higher cost rule
    }
}
void  State::_sub_Op_RegF(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(REGF, regF_rule, c)
    }
}
void  State::_sub_Op_RegD(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(REGD_LOW, regD_low_rule, c)
        DFA_PRODUCTION__SET_VALID(REGD, regD_rule, c+1)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(REGD, regD_rule, c)	  // overwrites higher cost rule
    }
}
void  State::_sub_Op_RegL(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IREGL, iRegL_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, iRegLd_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, R0R1RegL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, R2R3RegL_rule, c+1)
    }
}
void  State::_sub_Op_RegFlags(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREGF, flagsRegF_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREGL_LEGT, flagsRegL_LEGT_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREGL_EQNE, flagsRegL_EQNE_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREGL_LTGE, flagsRegL_LTGE_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREGP, flagsRegP_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREGU, flagsRegU_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, flagsReg_EQNELTGE_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, flagsReg_rule, c)
    }
}
void  State::_sub_Op_VecD(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(VECD, vecD_rule, c)
    }
}
void  State::_sub_Op_VecX(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(VECX, vecX_rule, c)
    }
}
void  State::_sub_Op_AbsD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, absD_reg_rule, c)
    }
}
void  State::_sub_Op_AbsF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, absF_reg_rule, c)
    }
}
void  State::_sub_Op_AddD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, addD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_AddF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, addF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_AddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _SUBI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], _ANDI_IREGI__CMPLTMASK_IREGI_IREGI) &&
        /*p*/(_kids[0]->_kids[0]->_leaf == _kids[1]->_kids[1]->_kids[0]->_leaf) && /*q*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_kids[1]->_kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_SUBI_IREGI_IREGI]+_kids[1]->_cost[_ANDI_IREGI__CMPLTMASK_IREGI_IREGI]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask_2_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask_2_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask_2_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask_2_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask_2_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask_2_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI__CMPLTMASK_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], _SUBI_IREGI_IREGI) &&
        /*p*/(_kids[0]->_kids[1]->_kids[0]->_leaf == _kids[1]->_kids[0]->_leaf) && /*q*/(_kids[0]->_kids[1]->_kids[1]->_leaf == _kids[1]->_kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI__CMPLTMASK_IREGI_IREGI]+_kids[1]->_cost[_SUBI_IREGI_IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], _ANDI__CMPLTMASK_IREGI_IREGI_IREGI) &&
        /*p*/(_kids[0]->_kids[0]->_leaf == _kids[1]->_kids[0]->_kids[0]->_leaf) && /*q*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_kids[0]->_kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_SUBI_IREGI_IREGI]+_kids[1]->_cost[_ANDI__CMPLTMASK_IREGI_IREGI_IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask_1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__CMPLTMASK_IREGI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], _SUBI_IREGI_IREGI) &&
        /*p*/(_kids[0]->_kids[0]->_kids[0]->_leaf == _kids[1]->_kids[0]->_leaf) && /*q*/(_kids[0]->_kids[0]->_kids[1]->_leaf == _kids[1]->_kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__CMPLTMASK_IREGI_IREGI_IREGI]+_kids[1]->_cost[_SUBI_IREGI_IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _ANDI_IREGI__CMPLTMASK_IREGI_AIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_ANDI_IREGI__CMPLTMASK_IREGI_AIMMI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask4_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask4_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask4_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask4_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask4_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask4_2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI__CMPLTMASK_IREGI_AIMMI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI__CMPLTMASK_IREGI_AIMMI]+_kids[1]->_cost[IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask4_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask4_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask4_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask4_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask4_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask4_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _ANDI__CMPLTMASK_IREGI_AIMMI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_ANDI__CMPLTMASK_IREGI_AIMMI_IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask4_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask4_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask4_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask4_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask4_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask4_1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__CMPLTMASK_IREGI_AIMMI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__CMPLTMASK_IREGI_AIMMI_IREGI]+_kids[1]->_cost[IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask4_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask4_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask4_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask4_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask4_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask4_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _ANDI_IREGI__CMPLTMASK_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_ANDI_IREGI__CMPLTMASK_IREGI_IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask3_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask3_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask3_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask3_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask3_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask3_2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI__CMPLTMASK_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI__CMPLTMASK_IREGI_IREGI]+_kids[1]->_cost[IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask3_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask3_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask3_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask3_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask3_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask3_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _ANDI__CMPLTMASK_IREGI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_ANDI__CMPLTMASK_IREGI_IREGI_IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask3_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask3_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask3_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask3_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask3_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask3_1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__CMPLTMASK_IREGI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__CMPLTMASK_IREGI_IREGI_IREGI]+_kids[1]->_cost[IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cadd_cmpLTMask3_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cadd_cmpLTMask3_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cadd_cmpLTMask3_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cadd_cmpLTMask3_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cadd_cmpLTMask3_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cadd_cmpLTMask3_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], AIMMINEG) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[AIMMINEG] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subI_reg_immRotneg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, subI_reg_immRotneg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, subI_reg_immRotneg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, subI_reg_immRotneg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, subI_reg_immRotneg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, subI_reg_immRotneg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], AIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[AIMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_reg_aimmI_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addI_reg_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addI_reg_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addI_reg_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addI_reg_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addI_reg_aimmI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addshrI_reg_imm_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addshrI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addshrI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addshrI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addshrI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addshrI_reg_imm_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addshrI_reg_imm_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addshrI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addshrI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addshrI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addshrI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addshrI_reg_imm_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addshrI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addshrI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addshrI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addshrI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addsarI_reg_imm_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addsarI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addsarI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addsarI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addsarI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addsarI_reg_imm_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addsarI_reg_imm_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addsarI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addsarI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addsarI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addsarI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addsarI_reg_imm_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addsarI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addsarI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addsarI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addsarI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addshlI_reg_imm_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addshlI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addshlI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addshlI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addshlI_reg_imm_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addshlI_reg_imm_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addshlI_reg_imm_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addshlI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addshlI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addshlI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addshlI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addshlI_reg_imm_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addshlI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addshlI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addshlI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addshlI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, addI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_AddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOWROT] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_immRot_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, addL_reg_immRot_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, addL_reg_immRot_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, addL_reg_immRot_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, addL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_AddP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], AIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[AIMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_aimmX_rule, c)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, addP_reg_aimmX_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_aimmX_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, addP_reg_aimmX_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, addP_reg_aimmX_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, addP_reg_aimmX_rule, c+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, addP_reg_aimmX_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, addP_reg_aimmX_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, addP_reg_aimmX_rule, c+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, addP_reg_aimmX_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_aimmX_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_aimmX_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], SHIFTEDX) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[SHIFTEDX]+DEFAULT_COST * 3/2;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addshlP_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, addshlP_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addshlP_reg_reg_imm_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, addshlP_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, addshlP_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, addshlP_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, addshlP_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, addshlP_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, addshlP_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, addshlP_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addshlP_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addshlP_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_reg_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_LSHIFTI_IREGI_IMMU5]+100;
        DFA_PRODUCTION__SET_VALID(INDINDEXSCALE, indIndexScale_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indIndexScale_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indIndexScale_rule, c)
      }
        DFA_PRODUCTION__SET_VALID(MEMORYSCALEDI, indIndexScale_rule, c)
        DFA_PRODUCTION__SET_VALID(MEMORYSCALEDP, indIndexScale_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGI]+100;
        DFA_PRODUCTION__SET_VALID(INDINDEX, indIndex_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indIndex_rule, c)
      }
        DFA_PRODUCTION__SET_VALID(INDINDEXMEMORY, indIndex_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], SP_PTR_REGP) && STATE__VALID_CHILD(_kids[1], IMMI12X2) ) {
      unsigned int c = _kids[0]->_cost[SP_PTR_REGP]+_kids[1]->_cost[IMMI12X2]+100;
        DFA_PRODUCTION__SET_VALID(INDOFFSET12X2, indOffset12x2_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indOffset12x2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], SP_PTR_REGP) && STATE__VALID_CHILD(_kids[1], IMMI10X2) ) {
      unsigned int c = _kids[0]->_cost[SP_PTR_REGP]+_kids[1]->_cost[IMMI10X2]+100;
        DFA_PRODUCTION__SET_VALID(INDOFFSETFPX2, indOffsetFPx2_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indOffsetFPx2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], SP_PTR_REGP) && STATE__VALID_CHILD(_kids[1], IMMIHD) ) {
      unsigned int c = _kids[0]->_cost[SP_PTR_REGP]+_kids[1]->_cost[IMMIHD]+100;
        DFA_PRODUCTION__SET_VALID(INDOFFSETHD, indOffsetHD_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indOffsetHD_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indOffsetHD_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indOffsetHD_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], SP_PTR_REGP) && STATE__VALID_CHILD(_kids[1], IMMIFP) ) {
      unsigned int c = _kids[0]->_cost[SP_PTR_REGP]+_kids[1]->_cost[IMMIFP]+100;
        DFA_PRODUCTION__SET_VALID(INDOFFSETFP, indOffsetFP_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indOffsetFP_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indOffsetFP_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indOffsetFP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], SP_PTR_REGP) && STATE__VALID_CHILD(_kids[1], IMMI12) ) {
      unsigned int c = _kids[0]->_cost[SP_PTR_REGP]+_kids[1]->_cost[IMMI12]+100;
        DFA_PRODUCTION__SET_VALID(INDOFFSET12, indOffset12_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indOffset12_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indOffset12_rule, c)
      }
    }
}
void  State::_sub_Op_AndI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], LIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[LIMMI];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGI_LIMMI, _AndI_iRegI_limmI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI__URSHIFTI_IREGI_IMMU5_IREGI, _AndI__URShiftI_iRegI_immU5_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IMMU5];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGI__URSHIFTI_IREGI_IMMU5, _AndI_iRegI__URShiftI_iRegI_immU5_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI__URSHIFTI_IREGI_IREGI_IREGI, _AndI__URShiftI_iRegI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGI__URSHIFTI_IREGI_IREGI, _AndI_iRegI__URShiftI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI__RSHIFTI_IREGI_IMMU5_IREGI, _AndI__RShiftI_iRegI_immU5_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IMMU5];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGI__RSHIFTI_IREGI_IMMU5, _AndI_iRegI__RShiftI_iRegI_immU5_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI__RSHIFTI_IREGI_IREGI_IREGI, _AndI__RShiftI_iRegI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGI__RSHIFTI_IREGI_IREGI, _AndI_iRegI__RShiftI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI__LSHIFTI_IREGI_IMMU5_IREGI, _AndI__LShiftI_iRegI_immU5_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IMMU5];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGI__LSHIFTI_IREGI_IMMU5, _AndI_iRegI__LShiftI_iRegI_immU5_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI__LSHIFTI_IREGI_IREGI_IREGI, _AndI__LShiftI_iRegI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGI__LSHIFTI_IREGI_IREGI, _AndI_iRegI__LShiftI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGI_IREGI, _AndI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _CMPLTMASK_IREGI_AIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_CMPLTMASK_IREGI_AIMMI];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGI__CMPLTMASK_IREGI_AIMMI, _AndI_iRegI__CmpLTMask_iRegI_aimmI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _CMPLTMASK_IREGI_AIMMI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_CMPLTMASK_IREGI_AIMMI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI__CMPLTMASK_IREGI_AIMMI_IREGI, _AndI__CmpLTMask_iRegI_aimmI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _CMPLTMASK_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_CMPLTMASK_IREGI_IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGI__CMPLTMASK_IREGI_IREGI, _AndI_iRegI__CmpLTMask_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _CMPLTMASK_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_CMPLTMASK_IREGI_IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_ANDI__CMPLTMASK_IREGI_IREGI_IREGI, _AndI__CmpLTMask_iRegI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], LIMMIN) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[LIMMIN] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, andI_reg_limmn_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, andI_reg_limmn_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, andI_reg_limmn_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, andI_reg_limmn_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, andI_reg_limmn_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, andI_reg_limmn_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], LIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[LIMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andI_reg_limm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andI_reg_limm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andI_reg_limm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andI_reg_limm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andI_reg_limm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andI_reg_limm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andshrI_reg_reg_imm_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andshrI_reg_reg_imm_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andshrI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andshrI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andshrI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andshrI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andshrI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andshrI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andsarI_reg_reg_imm_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andsarI_reg_reg_imm_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andsarI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andsarI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andsarI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andsarI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andsarI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andsarI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andshlI_reg_reg_imm_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andshlI_reg_reg_imm_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andshlI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andshlI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andshlI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andshlI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andshlI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andshlI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, andI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYI_) && STATE__VALID_CHILD(_kids[1], IMMU31) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYI_]+_kids[1]->_cost[IMMU31];
        DFA_PRODUCTION__SET_VALID(_ANDI__LOADI_MEMORYI__IMMU31, _AndI__LoadI_memoryI__immU31_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYI_) && STATE__VALID_CHILD(_kids[1], LIMMU31) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYI_]+_kids[1]->_cost[LIMMU31];
        DFA_PRODUCTION__SET_VALID(_ANDI__LOADI_MEMORYI__LIMMU31, _AndI__LoadI_memoryI__limmU31_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYS_) && STATE__VALID_CHILD(_kids[1], IMMI_65535) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYS_]+_kids[1]->_cost[IMMI_65535];
        DFA_PRODUCTION__SET_VALID(_ANDI__LOADI_MEMORYS__IMMI_65535, _AndI__LoadI_memoryS__immI_65535_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYB_) && STATE__VALID_CHILD(_kids[1], IMMI_255) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYB_]+_kids[1]->_cost[IMMI_255];
        DFA_PRODUCTION__SET_VALID(_ANDI__LOADI_MEMORYB__IMMI_255, _AndI__LoadI_memoryB__immI_255_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYS_) && STATE__VALID_CHILD(_kids[1], IMMI_65535) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYS_]+_kids[1]->_cost[IMMI_65535] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, loadI2US_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, loadI2US_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, loadI2US_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, loadI2US_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, loadI2US_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, loadI2US_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYB_) && STATE__VALID_CHILD(_kids[1], IMMI_255) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYB_]+_kids[1]->_cost[IMMI_255] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, loadI2UB_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, loadI2UB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, loadI2UB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, loadI2UB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, loadI2UB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, loadI2UB_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_MEMORYS_) && STATE__VALID_CHILD(_kids[1], LIMMI) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_MEMORYS_]+_kids[1]->_cost[LIMMI];
        DFA_PRODUCTION__SET_VALID(_ANDI__LOADUS_MEMORYS__LIMMI, _AndI__LoadUS_memoryS__limmI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_MEMORYB_) && STATE__VALID_CHILD(_kids[1], IMMI_255) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_MEMORYB_]+_kids[1]->_cost[IMMI_255];
        DFA_PRODUCTION__SET_VALID(_ANDI__LOADUS_MEMORYB__IMMI_255, _AndI__LoadUS_memoryB__immI_255_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUB_MEMORYB_) && STATE__VALID_CHILD(_kids[1], LIMMILOW8) ) {
      unsigned int c = _kids[0]->_cost[_LOADUB_MEMORYB_]+_kids[1]->_cost[LIMMILOW8];
        DFA_PRODUCTION__SET_VALID(_ANDI__LOADUB_MEMORYB__LIMMILOW8, _AndI__LoadUB_memoryB__limmIlow8_rule, c)
    }
}
void  State::_sub_Op_AndL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML_32BITS] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, zerox_long_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, zerox_long_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, zerox_long_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, zerox_long_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGI_) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGI_]+_kids[1]->_cost[IMML_32BITS] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, convI2L_reg_zex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, convI2L_reg_zex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, convI2L_reg_zex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, convI2L_reg_zex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOWROT] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, andL_reg_immRot_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, andL_reg_immRot_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, andL_reg_immRot_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, andL_reg_immRot_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, andL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, andL_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L__LOADI_MEMORYI__) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L__LOADI_MEMORYI__]+_kids[1]->_cost[IMML_32BITS] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadUI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadUI2L_rule, c+1)
      }
    }
}
void  State::_sub_Op_Binary(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML0) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML0];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGL_IMML0, _Binary_iRegL_immL0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPL_COMMUTE) && STATE__VALID_CHILD(_kids[1], FLAGSREGL_LEGT) ) {
      unsigned int c = _kids[0]->_cost[CMPOPL_COMMUTE]+_kids[1]->_cost[FLAGSREGL_LEGT];
        DFA_PRODUCTION__SET_VALID(_BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT, _Binary_cmpOpL_commute_flagsRegL_LEGT_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPL) && STATE__VALID_CHILD(_kids[1], FLAGSREGL_EQNE) ) {
      unsigned int c = _kids[0]->_cost[CMPOPL]+_kids[1]->_cost[FLAGSREGL_EQNE];
        DFA_PRODUCTION__SET_VALID(_BINARY_CMPOPL_FLAGSREGL_EQNE, _Binary_cmpOpL_flagsRegL_EQNE_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPL) && STATE__VALID_CHILD(_kids[1], FLAGSREGL_LTGE) ) {
      unsigned int c = _kids[0]->_cost[CMPOPL]+_kids[1]->_cost[FLAGSREGL_LTGE];
        DFA_PRODUCTION__SET_VALID(_BINARY_CMPOPL_FLAGSREGL_LTGE, _Binary_cmpOpL_flagsRegL_LTGE_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGLD) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGLD];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGL_IREGLD, _Binary_iRegL_iRegLd_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML16];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGL_IMML16, _Binary_iRegL_immL16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOWROT];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGL_IMMLLOWROT, _Binary_iRegL_immLlowRot_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGL_IREGL, _Binary_iRegL_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD];
        DFA_PRODUCTION__SET_VALID(_BINARY_REGD_REGD, _Binary_regD_regD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_BINARY_REGF_REGF, _Binary_regF_regF_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMP0) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMP0];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGP_IMMP0, _Binary_iRegP_immP0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGP_IREGP, _Binary_iRegP_iRegP_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPU) && STATE__VALID_CHILD(_kids[1], FLAGSREGU) ) {
      unsigned int c = _kids[0]->_cost[CMPOPU]+_kids[1]->_cost[FLAGSREGU];
        DFA_PRODUCTION__SET_VALID(_BINARY_CMPOPU_FLAGSREGU, _Binary_cmpOpU_flagsRegU_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP0) && STATE__VALID_CHILD(_kids[1], FLAGSREG_EQNELTGE) ) {
      unsigned int c = _kids[0]->_cost[CMPOP0]+_kids[1]->_cost[FLAGSREG_EQNELTGE];
        DFA_PRODUCTION__SET_VALID(_BINARY_CMPOP0_FLAGSREG_EQNELTGE, _Binary_cmpOp0_flagsReg_EQNELTGE_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREG) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREG];
        DFA_PRODUCTION__SET_VALID(_BINARY_CMPOP_FLAGSREG, _Binary_cmpOp_flagsReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGI_IMMI16, _Binary_iRegI_immI16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMIROT) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMIROT];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGI_IMMIROT, _Binary_iRegI_immIRot_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGI_IREGI, _Binary_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPP) && STATE__VALID_CHILD(_kids[1], FLAGSREGP) ) {
      unsigned int c = _kids[0]->_cost[CMPOPP]+_kids[1]->_cost[FLAGSREGP];
        DFA_PRODUCTION__SET_VALID(_BINARY_CMPOPP_FLAGSREGP, _Binary_cmpOpP_flagsRegP_rule, c)
    }
}
void  State::_sub_Op_Bool(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(CMPOPL_COMMUTE, cmpOpL_commute_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(CMPOPL, cmpOpL_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(CMPOPP, cmpOpP_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(CMPOPU, cmpOpU_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(CMPOP0, cmpOp0_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(CMPOP, cmpOp_rule, c)
    }
}
void  State::_sub_Op_ReverseBytesI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, bytes_reverse_int_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, bytes_reverse_int_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, bytes_reverse_int_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, bytes_reverse_int_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, bytes_reverse_int_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, bytes_reverse_int_rule, c+1)
    }
}
void  State::_sub_Op_ReverseBytesL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, bytes_reverse_long_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, bytes_reverse_long_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, bytes_reverse_long_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, bytes_reverse_long_rule, c+1)
    }
}
void  State::_sub_Op_ReverseBytesUS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, bytes_reverse_unsigned_short_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, bytes_reverse_unsigned_short_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, bytes_reverse_unsigned_short_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, bytes_reverse_unsigned_short_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, bytes_reverse_unsigned_short_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, bytes_reverse_unsigned_short_rule, c+1)
    }
}
void  State::_sub_Op_ReverseBytesS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, bytes_reverse_short_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, bytes_reverse_short_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, bytes_reverse_short_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, bytes_reverse_short_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, bytes_reverse_short_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, bytes_reverse_short_rule, c+1)
    }
}
void  State::_sub_Op_CallDynamicJava(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallDynamicJavaDirect_rule, c)
    }
}
void  State::_sub_Op_CallLeaf(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallLeafDirect_rule, c)
    }
}
void  State::_sub_Op_CallLeafNoFP(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallLeafNoFPDirect_rule, c)
    }
}
void  State::_sub_Op_CallRuntime(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallRuntimeDirect_rule, c)
    }
}
void  State::_sub_Op_CallStaticJava(const Node *n){
    if(         (
#line 11596 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
((CallStaticJavaNode*)n)->is_method_handle_invoke()
#line 1754 "dfa_arm.cpp"
) ) {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallStaticJavaHandle_rule, c)
    }
    if(         (
#line 11584 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
! ((CallStaticJavaNode*)n)->is_method_handle_invoke()
#line 1762 "dfa_arm.cpp"
) ) {
      unsigned int c = CALL_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallStaticJavaDirect_rule, c)
      }
    }
}
void  State::_sub_Op_CastII(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(IREGI, castII_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, castII_rule, c+1)
    }
}
void  State::_sub_Op_CastX2P(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, castX2P_rule, c)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, castX2P_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, castX2P_rule, c+1)
    }
}
void  State::_sub_Op_CastP2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP];
        DFA_PRODUCTION__SET_VALID(_CASTP2X_IREGP_, _CastP2X_iRegP__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, castP2X_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, castP2X_rule, c+1)
    }
}
void  State::_sub_Op_CastPP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, castPP_rule, c)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, castPP_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, castPP_rule, c+1)
    }
}
void  State::_sub_Op_CheckCastPP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, checkCastPP_rule, c)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, checkCastPP_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, checkCastPP_rule, c+1)
    }
}
void  State::_sub_Op_ClearArray(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGP]+300;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, clear_array_rule, c)
    }
}
void  State::_sub_Op_CMoveD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) &&
        (
#line 11533 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt 
#line 1894 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT]+_kids[1]->_cost[_BINARY_REGD_REGD]+150;
        DFA_PRODUCTION__SET_VALID(REGD, cmovDL_reg_LEGT_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_EQNE) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) &&
        (
#line 11520 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne 
#line 1903 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_EQNE]+_kids[1]->_cost[_BINARY_REGD_REGD]+150;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, cmovDL_reg_EQNE_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_LTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) &&
        (
#line 11507 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge 
#line 1914 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_LTGE]+_kids[1]->_cost[_BINARY_REGD_REGD]+150;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, cmovDL_reg_LTGE_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_FLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_FLAGSREGU]+_kids[1]->_cost[_BINARY_REGD_REGD]+150;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, cmovDIu_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP0_FLAGSREG_EQNELTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) &&
        (
#line 6623 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge
#line 1931 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP0_FLAGSREG_EQNELTGE]+_kids[1]->_cost[_BINARY_REGD_REGD]+150;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, cmovDI_reg_EQNELTGE_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_REGD_REGD]+150;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, cmovDI_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPP_FLAGSREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPP_FLAGSREGP]+_kids[1]->_cost[_BINARY_REGD_REGD]+150;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, cmovDP_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CMoveF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) &&
        (
#line 11495 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt 
#line 1956 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT]+_kids[1]->_cost[_BINARY_REGF_REGF]+150;
        DFA_PRODUCTION__SET_VALID(REGF, cmovFL_reg_LEGT_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_EQNE) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) &&
        (
#line 11483 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne 
#line 1965 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_EQNE]+_kids[1]->_cost[_BINARY_REGF_REGF]+150;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, cmovFL_reg_EQNE_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_LTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) &&
        (
#line 11471 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge 
#line 1976 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_LTGE]+_kids[1]->_cost[_BINARY_REGF_REGF]+150;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, cmovFL_reg_LTGE_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_FLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_FLAGSREGU]+_kids[1]->_cost[_BINARY_REGF_REGF]+150;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, cmovFIu_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP0_FLAGSREG_EQNELTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) &&
        (
#line 6571 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge
#line 1996 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP0_FLAGSREG_EQNELTGE]+_kids[1]->_cost[_BINARY_REGF_REGF]+150;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, cmovFI_reg_EQNELTGE_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_REGF_REGF]+150;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, cmovFI_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPP_FLAGSREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPP_FLAGSREGP]+_kids[1]->_cost[_BINARY_REGF_REGF]+150;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, cmovFP_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CMoveI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMI16) &&
        (
#line 11384 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt 
#line 2021 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT]+_kids[1]->_cost[_BINARY_IREGI_IMMI16]+140;
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIL_imm_LEGT_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIL_imm_LEGT_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_EQNE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMI16) &&
        (
#line 11372 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne 
#line 2035 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_EQNE]+_kids[1]->_cost[_BINARY_IREGI_IMMI16]+140;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIL_imm_EQNE_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIL_imm_EQNE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_LTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMI16) &&
        (
#line 11360 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge 
#line 2061 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_LTGE]+_kids[1]->_cost[_BINARY_IREGI_IMMI16]+140;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIL_imm_LTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIL_imm_LTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) &&
        (
#line 11345 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt 
#line 2087 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+150;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIL_reg_LEGT_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIL_reg_LEGT_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_EQNE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) &&
        (
#line 11332 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne 
#line 2113 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_EQNE]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+150;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIL_reg_EQNE_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIL_reg_EQNE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_LTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) &&
        (
#line 11319 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge 
#line 2139 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_LTGE]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+150;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIL_reg_LTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIL_reg_LTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_FLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMI16) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_FLAGSREGU]+_kids[1]->_cost[_BINARY_IREGI_IMMI16]+140;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIIu_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIIu_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIIu_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIIu_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIIu_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIIu_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_FLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMIROT) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_FLAGSREGU]+_kids[1]->_cost[_BINARY_IREGI_IMMIROT]+140;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIIu_immMov_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIIu_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIIu_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIIu_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIIu_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIIu_immMov_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_FLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_FLAGSREGU]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+150;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIIu_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIIu_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP0_FLAGSREG_EQNELTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMI16) &&
        (
#line 6268 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge
#line 2231 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP0_FLAGSREG_EQNELTGE]+_kids[1]->_cost[_BINARY_IREGI_IMMI16]+140;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovII_imm16_EQNELTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovII_imm16_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovII_imm16_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovII_imm16_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovII_imm16_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovII_imm16_EQNELTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP0_FLAGSREG_EQNELTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMIROT) &&
        (
#line 6253 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge
#line 2260 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP0_FLAGSREG_EQNELTGE]+_kids[1]->_cost[_BINARY_IREGI_IMMIROT]+140;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovII_immMov_EQNELTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovII_immMov_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovII_immMov_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovII_immMov_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovII_immMov_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovII_immMov_EQNELTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP0_FLAGSREG_EQNELTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) &&
        (
#line 6237 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge
#line 2289 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP0_FLAGSREG_EQNELTGE]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+150;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovII_reg_EQNELTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovII_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovII_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovII_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovII_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovII_reg_EQNELTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMI16) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGI_IMMI16]+140;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovII_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovII_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovII_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovII_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovII_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovII_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMIROT) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGI_IMMIROT]+140;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovI_immMov_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovI_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovI_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovI_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovI_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovI_immMov_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+150;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovI_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPP_FLAGSREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMI16) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPP_FLAGSREGP]+_kids[1]->_cost[_BINARY_IREGI_IMMI16]+140;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIP_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIP_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIP_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIP_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIP_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIP_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPP_FLAGSREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMIROT) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPP_FLAGSREGP]+_kids[1]->_cost[_BINARY_IREGI_IMMIROT]+140;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIP_immMov_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIP_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIP_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIP_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIP_immMov_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIP_immMov_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPP_FLAGSREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPP_FLAGSREGP]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+150;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovIP_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmovIP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmovIP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmovIP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmovIP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmovIP_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CMoveL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMML0) &&
        (
#line 11303 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt 
#line 2443 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT]+_kids[1]->_cost[_BINARY_IREGL_IMML0]+140;
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLL_imm_LEGT_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLL_imm_LEGT_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_EQNE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMML0) &&
        (
#line 11289 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne 
#line 2455 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_EQNE]+_kids[1]->_cost[_BINARY_IREGL_IMML0]+140;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLL_imm_EQNE_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLL_imm_EQNE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_LTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMML0) &&
        (
#line 11275 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge 
#line 2475 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_LTGE]+_kids[1]->_cost[_BINARY_IREGL_IMML0]+140;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLL_imm_LTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLL_imm_LTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) &&
        (
#line 11260 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt 
#line 2495 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+150;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLL_reg_LEGT_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLL_reg_LEGT_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_EQNE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) &&
        (
#line 11245 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne 
#line 2515 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_EQNE]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+150;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLL_reg_EQNE_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLL_reg_EQNE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_LTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) &&
        (
#line 11230 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge 
#line 2535 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_LTGE]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+150;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLL_reg_LTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLL_reg_LTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_FLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_FLAGSREGU]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+150;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLIu_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLIu_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP0_FLAGSREG_EQNELTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMML16) &&
        (
#line 6775 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge
#line 2573 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP0_FLAGSREG_EQNELTGE]+_kids[1]->_cost[_BINARY_IREGL_IMML16]+140;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLI_imm16_EQNELTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLI_imm16_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLI_imm16_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLI_imm16_EQNELTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMML16) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGL_IMML16]+140;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLI_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLI_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLI_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLI_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP0_FLAGSREG_EQNELTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMMLLOWROT) &&
        (
#line 6743 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge
#line 2611 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP0_FLAGSREG_EQNELTGE]+_kids[1]->_cost[_BINARY_IREGL_IMMLLOWROT]+140;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLI_immRot_EQNELTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLI_immRot_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLI_immRot_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLI_immRot_EQNELTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGL_IMMLLOWROT]+140;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLI_immRot_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLI_immRot_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLI_immRot_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLI_immRot_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP0_FLAGSREG_EQNELTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) &&
        (
#line 6707 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge
#line 2649 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP0_FLAGSREG_EQNELTGE]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+150;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLI_reg_EQNELTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLI_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLI_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLI_reg_EQNELTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+150;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLI_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPP_FLAGSREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMML16) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPP_FLAGSREGP]+_kids[1]->_cost[_BINARY_IREGL_IMML16]+140;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLP_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLP_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLP_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLP_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPP_FLAGSREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPP_FLAGSREGP]+_kids[1]->_cost[_BINARY_IREGL_IMMLLOWROT]+140;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLP_immRot_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLP_immRot_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLP_immRot_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLP_immRot_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPP_FLAGSREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPP_FLAGSREGP]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+150;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovLP_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, cmovLP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, cmovLP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, cmovLP_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CMoveP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMP0) &&
        (
#line 11459 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt 
#line 2731 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT]+_kids[1]->_cost[_BINARY_IREGP_IMMP0]+140;
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPL_imm_LEGT_rule, c)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPL_imm_LEGT_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPL_imm_LEGT_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPL_imm_LEGT_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_EQNE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMP0) &&
        (
#line 11447 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne 
#line 2763 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_EQNE]+_kids[1]->_cost[_BINARY_IREGP_IMMP0]+140;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPL_imm_EQNE_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPL_imm_EQNE_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPL_imm_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPL_imm_EQNE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_LTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMP0) &&
        (
#line 11435 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge 
#line 2843 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_LTGE]+_kids[1]->_cost[_BINARY_IREGP_IMMP0]+140;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPL_imm_LTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPL_imm_LTGE_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPL_imm_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPL_imm_LTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 11422 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt 
#line 2923 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_COMMUTE_FLAGSREGL_LEGT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+150;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPL_reg_LEGT_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPL_reg_LEGT_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPL_reg_LEGT_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPL_reg_LEGT_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_EQNE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 11409 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne 
#line 3003 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_EQNE]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+150;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPL_reg_EQNE_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPL_reg_EQNE_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPL_reg_EQNE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPL_reg_EQNE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPL_FLAGSREGL_LTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 11396 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge 
#line 3083 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPL_FLAGSREGL_LTGE]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+150;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPL_reg_LTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPL_reg_LTGE_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPL_reg_LTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPL_reg_LTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_FLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMP0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_FLAGSREGU]+_kids[1]->_cost[_BINARY_IREGP_IMMP0]+140;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPIu_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPIu_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPIu_imm_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPIu_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPIu_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPIu_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPIu_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPIu_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPIu_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPIu_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPIu_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPIu_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP0_FLAGSREG_EQNELTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMP0) &&
        (
#line 6411 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge
#line 3241 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP0_FLAGSREG_EQNELTGE]+_kids[1]->_cost[_BINARY_IREGP_IMMP0]+140;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPI_imm_EQNELTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPI_imm_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPI_imm_EQNELTGE_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPI_imm_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPI_imm_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPI_imm_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPI_imm_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPI_imm_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPI_imm_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPI_imm_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPI_imm_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPI_imm_EQNELTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMP0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGP_IMMP0]+140;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPI_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPI_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPI_imm_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPI_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPI_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPI_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPI_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPI_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPI_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPI_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPI_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPI_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_FLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_FLAGSREGU]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+150;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPIu_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPIu_reg_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPIu_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPIu_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP0_FLAGSREG_EQNELTGE) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 6363 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt ||
            _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge
#line 3474 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP0_FLAGSREG_EQNELTGE]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+150;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPI_reg_EQNELTGE_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPI_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPI_reg_EQNELTGE_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPI_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPI_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPI_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPI_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPI_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPI_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPI_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPI_reg_EQNELTGE_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPI_reg_EQNELTGE_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+150;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPI_reg_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPI_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPP_FLAGSREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMP0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPP_FLAGSREGP]+_kids[1]->_cost[_BINARY_IREGP_IMMP0]+140;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPP_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPP_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPP_imm_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPP_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPP_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPP_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPP_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPP_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPP_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPP_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPP_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPP_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPP_FLAGSREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPP_FLAGSREGP]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+150;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovPP_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, cmovPP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovPP_reg_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, cmovPP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, cmovPP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, cmovPP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, cmovPP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, cmovPP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, cmovPP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, cmovPP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovPP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovPP_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], IMMD0) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[IMMD0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpD0_cc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpD_cc_rule, c)
      }
    }
}
void  State::_sub_Op_CmpD3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], IMMD0) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[IMMD0]+DEFAULT_COST*3+BRANCH_COST*3;
        DFA_PRODUCTION__SET_VALID(IREGI, cmpD0_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, cmpD0_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, cmpD0_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, cmpD0_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, cmpD0_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, cmpD0_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD]+DEFAULT_COST*3+BRANCH_COST*3;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmpD_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmpD_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmpD_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmpD_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmpD_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmpD_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], IMMF0) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[IMMF0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpF0_cc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpF_cc_rule, c)
      }
    }
}
void  State::_sub_Op_CmpF3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], IMMF0) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[IMMF0]+DEFAULT_COST*3+BRANCH_COST*3;
        DFA_PRODUCTION__SET_VALID(IREGI, cmpF0_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, cmpF0_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, cmpF0_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, cmpF0_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, cmpF0_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, cmpF0_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF]+DEFAULT_COST*3+BRANCH_COST*3;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmpF_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmpF_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmpF_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmpF_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmpF_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmpF_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI_LIMMI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI_LIMMI]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testI_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__URSHIFTI_IREGI_IMMU5_IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__URSHIFTI_IREGI_IMMU5_IREGI]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testshrI_reg_reg_imm_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI__URSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI__URSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testshrI_reg_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__URSHIFTI_IREGI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__URSHIFTI_IREGI_IREGI_IREGI]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testshrI_reg_reg_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI__URSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI__URSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testshrI_reg_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__RSHIFTI_IREGI_IMMU5_IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__RSHIFTI_IREGI_IMMU5_IREGI]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testsarI_reg_reg_imm_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI__RSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI__RSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testsarI_reg_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__RSHIFTI_IREGI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__RSHIFTI_IREGI_IREGI_IREGI]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testsarI_reg_reg_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI__RSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI__RSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testsarI_reg_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__LSHIFTI_IREGI_IMMU5_IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__LSHIFTI_IREGI_IMMU5_IREGI]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testshlI_reg_reg_imm_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI__LSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI__LSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testshlI_reg_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__LSHIFTI_IREGI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__LSHIFTI_IREGI_IREGI_IREGI]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testshlI_reg_reg_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI__LSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI__LSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testshlI_reg_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI_IREGI]+_kids[1]->_cost[IMMI0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG_EQNELTGE) || _cost[FLAGSREG_EQNELTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG_EQNELTGE, testI_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], AIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[AIMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compI_iReg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], AIMMINEG) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[AIMMINEG] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compI_iReg_immneg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compI_iReg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOWROT] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGL_LEGT, compL_reg_con_LEGT_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOWROT] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGL_EQNE, compL_reg_con_EQNE_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOWROT] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGL_LTGE, compL_reg_con_LTGE_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREGL_LEGT) || _cost[FLAGSREGL_LEGT] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGL_LEGT, compL_reg_reg_LEGT_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREGL_EQNE) || _cost[FLAGSREGL_EQNE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGL_EQNE, compL_reg_reg_EQNE_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREGL_LTGE) || _cost[FLAGSREGL_LTGE] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGL_LTGE, compL_reg_reg_LTGE_rule, c)
      }
    }
}
void  State::_sub_Op_CmpL3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+6*DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, cmpL3_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, cmpL3_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_CmpLTMask(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], AIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[AIMMI];
        DFA_PRODUCTION__SET_VALID(_CMPLTMASK_IREGI_AIMMI, _CmpLTMask_iRegI_aimmI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_CMPLTMASK_IREGI_IREGI, _CmpLTMask_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], AIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[AIMMI]+DEFAULT_COST*3;
        DFA_PRODUCTION__SET_VALID(IREGI, cmpLTMask_reg_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, cmpLTMask_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, cmpLTMask_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, cmpLTMask_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, cmpLTMask_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, cmpLTMask_reg_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmpLTMask_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, cmpLTMask_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, cmpLTMask_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, cmpLTMask_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, cmpLTMask_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, cmpLTMask_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMPROT) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMPROT] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGP, compP_iRegP_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREGP) || _cost[FLAGSREGP] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGP, compP_iRegP_rule, c)
      }
    }
}
void  State::_sub_Op_CmpU(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], AIMMU31) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[AIMMU31] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGU, compU_iReg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREGU) || _cost[FLAGSREGU] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGU, compU_iReg_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndSwapI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[_BINARY_IREGI_IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, compareAndSwapI_bool_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, compareAndSwapI_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, compareAndSwapI_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, compareAndSwapI_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, compareAndSwapI_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, compareAndSwapI_bool_rule, c+1)
    }
}
void  State::_sub_Op_CompareAndSwapL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGLD) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[_BINARY_IREGL_IREGLD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, compareAndSwapL_bool_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, compareAndSwapL_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, compareAndSwapL_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, compareAndSwapL_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, compareAndSwapL_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, compareAndSwapL_bool_rule, c+1)
    }
}
void  State::_sub_Op_CompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[_BINARY_IREGP_IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, compareAndSwapP_bool_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, compareAndSwapP_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, compareAndSwapP_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, compareAndSwapP_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, compareAndSwapP_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, compareAndSwapP_bool_rule, c+1)
    }
}
void  State::_sub_Op_GetAndAddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, xaddI_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, xaddI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, xaddI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, xaddI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, xaddI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, xaddI_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], AIMMI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[AIMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xaddI_aimmI_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xaddI_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xaddI_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xaddI_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xaddI_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xaddI_aimmI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 7528 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_LoadStore()->result_not_used()
#line 4139 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, xaddI_reg_no_res_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], AIMMI) &&
        (
#line 7479 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_LoadStore()->result_not_used()
#line 4148 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[AIMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, xaddI_aimmI_no_res_rule, c)
      }
    }
}
void  State::_sub_Op_GetAndAddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[IMMLLOWROT] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLD, xaddL_immRot_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLD, xaddL_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], IMMLLOWROT) &&
        (
#line 7724 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_LoadStore()->result_not_used()
#line 4171 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[IMMLLOWROT] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, xaddL_immRot_no_res_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 7671 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_LoadStore()->result_not_used()
#line 4180 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, xaddL_reg_no_res_rule, c)
      }
    }
}
void  State::_sub_Op_GetAndSetI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, xchgI_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, xchgI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, xchgI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, xchgI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, xchgI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, xchgI_rule, c+1)
    }
}
void  State::_sub_Op_GetAndSetL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], IREGLD) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[IREGLD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLD, xchgL_rule, c)
    }
}
void  State::_sub_Op_GetAndSetP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, xchgP_rule, c)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, xchgP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, xchgP_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, xchgP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, xchgP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, xchgP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, xchgP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, xchgP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, xchgP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, xchgP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, xchgP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, xchgP_rule, c+1)
    }
}
void  State::_sub_Op_ConN(const Node *n){
    if(         
#line 2296 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->get_narrowcon() == 0
#line 4238 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMN0, immN0_rule, c)
    }
    {
      unsigned int c = 10;
        DFA_PRODUCTION__SET_VALID(IMMN, immN_rule, c)
    }
}
void  State::_sub_Op_ConNKlass(const Node *n){
    {
      unsigned int c = 10;
        DFA_PRODUCTION__SET_VALID(IMMNKLASS, immNKlass_rule, c)
    }
}
void  State::_sub_Op_ConD(const Node *n){
    if(         
#line 2361 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
Assembler::double_num(n->getd()).can_be_imm8()
#line 4258 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMM8D, imm8D_rule, c)
        DFA_PRODUCTION__SET_VALID(REGD, loadConD_imm8_rule, c+DEFAULT_COST)
    }
    if(         
#line 2352 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
jlong_cast(n->getd()) == 0
#line 4267 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMD0, immD0_rule, c)
    }
    {
      unsigned int c = 40;
        DFA_PRODUCTION__SET_VALID(IMMD, immD_rule, c)
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(REGD, loadConD_rule, c+MEMORY_REF_COST)
      }
    }
   if ( /* REGD KNOWN_VALID || */ _cost[REGD] > MEMORY_REF_COST) {
     DFA_PRODUCTION(REGD, loadConD_rule, MEMORY_REF_COST)
   }
}
void  State::_sub_Op_ConF(const Node *n){
    if(         
#line 2390 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
Assembler::float_num(n->getf()).can_be_imm8()
#line 4287 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMM8F, imm8F_rule, c)
        DFA_PRODUCTION__SET_VALID(REGF, loadConF_imm8_rule, c+DEFAULT_COST)
    }
    if(         
#line 2380 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
jint_cast(n->getf()) == 0
#line 4296 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMF0, immF0_rule, c)
    }
    {
      unsigned int c = 20;
        DFA_PRODUCTION__SET_VALID(IMMF, immF_rule, c)
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c+DEFAULT_COST * 2) {
        DFA_PRODUCTION__SET_VALID(REGF, loadConF_rule, c+DEFAULT_COST * 2)
      }
    }
   if ( /* REGF KNOWN_VALID || */ _cost[REGF] > DEFAULT_COST * 2) {
     DFA_PRODUCTION(REGF, loadConF_rule, DEFAULT_COST * 2)
   }
}
void  State::_sub_Op_ConI(const Node *n){
    int _n_get_int__ = n->get_int();
    if(         
#line 2178 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
is_limmI(~n->get_int())
#line 4317 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(LIMMIN, limmIn_rule, c)
    }
    if(         
#line 2169 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
0 <= _n_get_int__ && is_limmI(_n_get_int__)
#line 4325 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(LIMMU31, limmU31_rule, c)
    }
    if(         
#line 2160 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
is_limmI_low(_n_get_int__, 8)
#line 4333 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(LIMMILOW8, limmIlow8_rule, c)
    }
    if(         
#line 2151 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
is_limmI(_n_get_int__)
#line 4341 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(LIMMI, limmI_rule, c)
    }
    if(         
#line 2140 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
(0 <= _n_get_int__) && is_aimm(_n_get_int__)
#line 4349 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(AIMMU31, aimmU31_rule, c)
    }
    if(         
#line 2131 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
is_aimm(-n->get_int())
#line 4357 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(AIMMINEG, aimmIneg_rule, c)
    }
    if(         
#line 2122 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
is_aimm(_n_get_int__)
#line 4365 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(AIMMI, aimmI_rule, c)
    }
    if(         
#line 2111 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ == 65535
#line 4373 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_65535, immI_65535_rule, c)
    }
    if(         
#line 2101 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
 _n_get_int__ == 255 
#line 4381 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_255, immI_255_rule, c)
    }
    if(         
#line 2091 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ == 24
#line 4389 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_24, immI_24_rule, c)
    }
    if(         
#line 2081 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ == 16
#line 4397 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_16, immI_16_rule, c)
    }
    if(         
#line 2069 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ >= 32 && _n_get_int__ <= 63
#line 4405 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_32_63, immI_32_63_rule, c)
    }
    if(         
#line 2059 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ >= 0
#line 4413 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMU31, immU31_rule, c)
    }
    if(         
#line 2048 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ == 8
#line 4421 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_8, immI_8_rule, c)
    }
    if(         
#line 2038 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ == 4
#line 4429 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_4, immI_4_rule, c)
    }
    if(         
#line 2028 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ == 3
#line 4437 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_3, immI_3_rule, c)
    }
    if(         
#line 2018 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ == 2
#line 4445 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_2, immI_2_rule, c)
    }
    if(         
#line 2008 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ == 1
#line 4453 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_1, immI_1_rule, c)
    }
    if(         
#line 1998 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ == 0
#line 4461 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI0, immI0_rule, c)
    }
    if(         
#line 1989 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_int__ >= 32 && _n_get_int__ <= 63
#line 4469 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMU6BIG, immU6Big_rule, c)
    }
    if(         
#line 1979 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
0 <= _n_get_int__ && (_n_get_int__ <= 31)
#line 4477 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMU5, immU5_rule, c)
    }
    if(         
#line 1968 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
is_memoryfp(_n_get_int__) && ((_n_get_int__ & 3) == 0)
#line 4485 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMIFP, immIFP_rule, c)
    }
    if(         
#line 1959 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
is_memoryHD(_n_get_int__)
#line 4493 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMIHD, immIHD_rule, c)
    }
    if(         
#line 1948 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
(_n_get_int__ >> 16) == 0 && VM_Version::supports_movw()
#line 4501 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI16, immI16_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGI, loadConI16_rule, c+DEFAULT_COST)
        DFA_PRODUCTION__SET_VALID(R0REGI, loadConI16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, loadConI16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, loadConI16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, loadConI16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, loadConI16_rule, c+DEFAULT_COST+1)
    }
    if(         
#line 1938 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
0 <= _n_get_int__ && (_n_get_int__ <= 255)
#line 4515 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMU8, immU8_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI, immI_rule, c)
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c+DEFAULT_COST * 3/2) {
        DFA_PRODUCTION__SET_VALID(IREGI, loadConI_rule, c+DEFAULT_COST * 3/2)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, loadConI_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, loadConI_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, loadConI_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, loadConI_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, loadConI_rule, c+DEFAULT_COST * 3/2+1)
      }
    }
    if(         
#line 580 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm_32.ad"
(-4096 < _n_get_int__) && (_n_get_int__ < 4096 - 4)
#line 4545 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI12X2, immI12x2_rule, c)
    }
    if(         
#line 570 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm_32.ad"
(-1024 < _n_get_int__) && (_n_get_int__ < 1024 - 4)
#line 4553 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI10X2, immI10x2_rule, c)
    }
    if(         
#line 560 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm_32.ad"
(-4096 < _n_get_int__) && (_n_get_int__ < 4096)
#line 4561 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI12, immI12_rule, c)
    }
    if(         
#line 519 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm_32.ad"
(0 <= _n_get_int__) && AsmOperand::is_rotated_imm(_n_get_int__)
#line 4569 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMU31ROT, immU31Rot_rule, c)
    }
    if(         
#line 507 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm_32.ad"
!AsmOperand::is_rotated_imm(_n_get_int__) && AsmOperand::is_rotated_imm(-n->get_int())
#line 4577 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMIROTNEG, immIRotneg_rule, c)
    }
    if(         
#line 494 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm_32.ad"
_n_get_int__ != 0 && AsmOperand::is_rotated_imm(~n->get_int())
#line 4585 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMIROTN, immIRotn_rule, c)
    }
    if(         
#line 484 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm_32.ad"
AsmOperand::is_rotated_imm(_n_get_int__)
#line 4593 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMIROT, immIRot_rule, c)
    }
   if ( /* IREGI KNOWN_VALID || */ _cost[IREGI] > DEFAULT_COST * 3/2) {
     DFA_PRODUCTION(IREGI, loadConI_rule, DEFAULT_COST * 3/2)
   }
   if ( /* R0REGI KNOWN_VALID || */ _cost[R0REGI] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(R0REGI, loadConI_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* R1REGI KNOWN_VALID || */ _cost[R1REGI] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(R1REGI, loadConI_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* R2REGI KNOWN_VALID || */ _cost[R2REGI] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(R2REGI, loadConI_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* R3REGI KNOWN_VALID || */ _cost[R3REGI] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(R3REGI, loadConI_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* R12REGI KNOWN_VALID || */ _cost[R12REGI] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(R12REGI, loadConI_rule, DEFAULT_COST * 3/2+1)
   }
}
void  State::_sub_Op_ConL(const Node *n){
    jlong _n_get_long__ = n->get_long();
    if(         
#line 2333 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_long__ == 0xFFFFFFFFL
#line 4622 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML_32BITS, immL_32bits_rule, c)
    }
    if(         
#line 2323 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_long__ >= 0 && _n_get_long__ < (1<<16)  && VM_Version::supports_movw()
#line 4630 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML16, immL16_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGL, loadConL16_rule, c+DEFAULT_COST * 2)
        DFA_PRODUCTION__SET_VALID(IREGLD, loadConL16_rule, c+DEFAULT_COST * 2+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadConL16_rule, c+DEFAULT_COST * 2+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadConL16_rule, c+DEFAULT_COST * 2+1)
    }
    if(         
#line 2313 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_n_get_long__ == 0L
#line 4642 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML0, immL0_rule, c)
    }
    {
      unsigned int c = 40;
        DFA_PRODUCTION__SET_VALID(IMML, immL_rule, c)
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c+DEFAULT_COST * 4) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadConL_rule, c+DEFAULT_COST * 4)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+DEFAULT_COST * 4+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadConL_rule, c+DEFAULT_COST * 4+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+DEFAULT_COST * 4+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadConL_rule, c+DEFAULT_COST * 4+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+DEFAULT_COST * 4+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadConL_rule, c+DEFAULT_COST * 4+1)
      }
    }
    if(         
#line 2238 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
 _n_get_long__ == 0xFFFFL 
#line 4666 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML_FFFF, immL_FFFF_rule, c)
    }
    if(         
#line 2228 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
 _n_get_long__ == 0xFFL 
#line 4674 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML_FF, immL_FF_rule, c)
    }
    if(         
#line 549 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm_32.ad"
AsmOperand::is_rotated_imm((int)(_n_get_long__ >> 32)) &&
            AsmOperand::is_rotated_imm((int)(_n_get_long__))
#line 4683 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMLROT2, immLRot2_rule, c)
    }
    if(         
#line 540 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm_32.ad"
_n_get_long__ >> 32 == 0 && AsmOperand::is_rotated_imm((int)n->get_long())
#line 4691 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMLLOWROT, immLlowRot_rule, c)
    }
   if ( /* IREGL KNOWN_VALID || */ _cost[IREGL] > DEFAULT_COST * 4) {
     DFA_PRODUCTION(IREGL, loadConL_rule, DEFAULT_COST * 4)
   }
   if ( /* IREGLD KNOWN_VALID || */ _cost[IREGLD] > DEFAULT_COST * 4+1) {
     DFA_PRODUCTION(IREGLD, loadConL_rule, DEFAULT_COST * 4+1)
   }
   if ( /* R0R1REGL KNOWN_VALID || */ _cost[R0R1REGL] > DEFAULT_COST * 4+1) {
     DFA_PRODUCTION(R0R1REGL, loadConL_rule, DEFAULT_COST * 4+1)
   }
   if ( /* R2R3REGL KNOWN_VALID || */ _cost[R2R3REGL] > DEFAULT_COST * 4+1) {
     DFA_PRODUCTION(R2R3REGL, loadConL_rule, DEFAULT_COST * 4+1)
   }
}
void  State::_sub_Op_ConP(const Node *n){
    if(         
#line 2266 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->get_ptr() != 0 && n->get_ptr() == (intptr_t)os::get_polling_page()
#line 4713 "dfa_arm.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMP_POLL, immP_poll_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP, loadConP_poll_rule, c+DEFAULT_COST)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, loadConP_poll_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadConP_poll_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, loadConP_poll_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, loadConP_poll_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, loadConP_poll_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, loadConP_poll_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, loadConP_poll_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, loadConP_poll_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, loadConP_poll_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadConP_poll_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadConP_poll_rule, c+DEFAULT_COST+1)
    }
    if(         
#line 2257 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->get_ptr() == 0
#line 4745 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMP0, immP0_rule, c)
    }
    {
      unsigned int c = 5;
        DFA_PRODUCTION__SET_VALID(IMMP, immP_rule, c)
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c+DEFAULT_COST * 3/2) {
        DFA_PRODUCTION__SET_VALID(IREGP, loadConP_rule, c+DEFAULT_COST * 3/2)
      }
      if (STATE__NOT_YET_VALID(SP_PTR_REGP) || _cost[SP_PTR_REGP] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, loadConP_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadConP_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYI) || _cost[MEMORYI] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYP) || _cost[MEMORYP] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF) || _cost[MEMORYF] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYF2) || _cost[MEMORYF2] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYD) || _cost[MEMORYD] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYFP) || _cost[MEMORYFP] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYB) || _cost[MEMORYB] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYS) || _cost[MEMORYS] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYL) || _cost[MEMORYL] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYEX) || _cost[MEMORYEX] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYLONG) || _cost[MEMORYLONG] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYVLD) || _cost[MEMORYVLD] > c+DEFAULT_COST * 3/2+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+DEFAULT_COST * 3/2+1+100)
      }
      if (STATE__NOT_YET_VALID(R0REGP) || _cost[R0REGP] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(R0REGP, loadConP_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(R1REGP) || _cost[R1REGP] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(R1REGP, loadConP_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(R2REGP) || _cost[R2REGP] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(R2REGP, loadConP_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(REXCEPTIONREGP) || _cost[REXCEPTIONREGP] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, loadConP_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(RTHREADREGP) || _cost[RTHREADREGP] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, loadConP_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(IPREGP) || _cost[IPREGP] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(IPREGP, loadConP_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(LRREGP) || _cost[LRREGP] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(LRREGP, loadConP_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadConP_rule, c+DEFAULT_COST * 3/2+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+DEFAULT_COST * 3/2+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadConP_rule, c+DEFAULT_COST * 3/2+1)
      }
    }
    if(         
#line 529 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm_32.ad"
n->get_ptr() == 0 || (AsmOperand::is_rotated_imm(n->get_ptr()) && ((ConPNode*)n)->type()->reloc() == relocInfo::none)
#line 4829 "dfa_arm.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMPROT, immPRot_rule, c)
    }
   if ( /* IREGP KNOWN_VALID || */ _cost[IREGP] > DEFAULT_COST * 3/2) {
     DFA_PRODUCTION(IREGP, loadConP_rule, DEFAULT_COST * 3/2)
   }
   if ( /* SP_PTR_REGP KNOWN_VALID || */ _cost[SP_PTR_REGP] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(SP_PTR_REGP, loadConP_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* INDIRECT KNOWN_VALID || */ _cost[INDIRECT] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(INDIRECT, loadConP_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYI KNOWN_VALID || */ _cost[MEMORYI] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYI, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYP KNOWN_VALID || */ _cost[MEMORYP] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYP, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYF KNOWN_VALID || */ _cost[MEMORYF] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYF, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYF2 KNOWN_VALID || */ _cost[MEMORYF2] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYF2, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYD KNOWN_VALID || */ _cost[MEMORYD] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYD, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYFP KNOWN_VALID || */ _cost[MEMORYFP] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYFP, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYB KNOWN_VALID || */ _cost[MEMORYB] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYB, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYS KNOWN_VALID || */ _cost[MEMORYS] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYS, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYL KNOWN_VALID || */ _cost[MEMORYL] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYL, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYEX KNOWN_VALID || */ _cost[MEMORYEX] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYEX, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYLONG KNOWN_VALID || */ _cost[MEMORYLONG] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYLONG, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* MEMORYVLD KNOWN_VALID || */ _cost[MEMORYVLD] > DEFAULT_COST * 3/2+1+100) {
     DFA_PRODUCTION(MEMORYVLD, indirect_rule, DEFAULT_COST * 3/2+1+100)
   }
   if ( /* R0REGP KNOWN_VALID || */ _cost[R0REGP] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(R0REGP, loadConP_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* R1REGP KNOWN_VALID || */ _cost[R1REGP] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(R1REGP, loadConP_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* R2REGP KNOWN_VALID || */ _cost[R2REGP] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(R2REGP, loadConP_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* REXCEPTIONREGP KNOWN_VALID || */ _cost[REXCEPTIONREGP] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(REXCEPTIONREGP, loadConP_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* RTHREADREGP KNOWN_VALID || */ _cost[RTHREADREGP] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(RTHREADREGP, loadConP_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* IPREGP KNOWN_VALID || */ _cost[IPREGP] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(IPREGP, loadConP_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* LRREGP KNOWN_VALID || */ _cost[LRREGP] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(LRREGP, loadConP_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* INLINE_CACHE_REGP KNOWN_VALID || */ _cost[INLINE_CACHE_REGP] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(INLINE_CACHE_REGP, loadConP_rule, DEFAULT_COST * 3/2+1)
   }
   if ( /* INTERPRETER_METHOD_OOP_REGP KNOWN_VALID || */ _cost[INTERPRETER_METHOD_OOP_REGP] > DEFAULT_COST * 3/2+1) {
     DFA_PRODUCTION(INTERPRETER_METHOD_OOP_REGP, loadConP_rule, DEFAULT_COST * 3/2+1)
   }
}
void  State::_sub_Op_Conv2B(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(IREGI, convP2B_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, convP2B_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, convP2B_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, convP2B_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, convP2B_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, convP2B_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, convI2B_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, convI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, convI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, convI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, convI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, convI2B_rule, c+1)
      }
    }
}
void  State::_sub_Op_ConvD2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, convD2F_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _SQRTD__CONVF2D_REGF__) ) {
      unsigned int c = _kids[0]->_cost[_SQRTD__CONVF2D_REGF__] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, sqrtF_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_ConvD2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+DEFAULT_COST*2 + MEMORY_REF_COST*2 + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, convD2I_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, convD2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, convD2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, convD2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, convD2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, convD2I_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_ConvD2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(R0R1REGL, convD2L_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGL, convD2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLD, convD2L_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, convD2L_reg_rule, c+1+1)
    }
}
void  State::_sub_Op_ConvF2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, convF2D_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_CONVF2D_REGF_, _ConvF2D_regF__rule, c)
    }
}
void  State::_sub_Op_ConvF2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+DEFAULT_COST*2 + MEMORY_REF_COST*2 + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, convF2I_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, convF2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, convF2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, convF2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, convF2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, convF2I_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_ConvF2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+DEFAULT_COST*2 + MEMORY_REF_COST*2 + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(R0R1REGL, convF2L_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGL, convF2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLD, convF2L_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, convF2L_reg_rule, c+1+1)
    }
}
void  State::_sub_Op_ConvI2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+DEFAULT_COST + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGD_LOW, convI2D_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(REGD, convI2D_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_ConvI2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+DEFAULT_COST + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGF, convI2F_reg_reg_rule, c)
    }
}
void  State::_sub_Op_ConvI2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_CONVI2L_IREGI_, _ConvI2L_iRegI__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, convI2L_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, convI2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, convI2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, convI2L_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYI_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYI_];
        DFA_PRODUCTION__SET_VALID(_CONVI2L__LOADI_MEMORYI__, _ConvI2L__LoadI_memoryI___rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__LOADI_MEMORYI__IMMU31) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__LOADI_MEMORYI__IMMU31]+MEMORY_REF_COST + 4*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadI2L_immU31_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadI2L_immU31_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadI2L_immU31_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadI2L_immU31_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__LOADI_MEMORYI__LIMMU31) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__LOADI_MEMORYI__LIMMU31]+MEMORY_REF_COST + 2*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadI2L_limmU31_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadI2L_limmU31_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadI2L_limmU31_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadI2L_limmU31_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__LOADI_MEMORYS__IMMI_65535) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__LOADI_MEMORYS__IMMI_65535] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadI2L_immI_65535_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadI2L_immI_65535_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadI2L_immI_65535_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadI2L_immI_65535_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__LOADI_MEMORYB__IMMI_255) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__LOADI_MEMORYB__IMMI_255] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadI2L_immI_255_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadI2L_immI_255_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadI2L_immI_255_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadI2L_immI_255_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYI_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYI_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadI2L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__LOADUS_MEMORYS__LIMMI) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__LOADUS_MEMORYS__LIMMI]+MEMORY_REF_COST + 2*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadUS2L_limmI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadUS2L_limmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadUS2L_limmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadUS2L_limmI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__LOADUS_MEMORYB__IMMI_255) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__LOADUS_MEMORYB__IMMI_255] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadUS2L_immI_255_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadUS2L_immI_255_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadUS2L_immI_255_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadUS2L_immI_255_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_MEMORYS_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_MEMORYS_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadUS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadUS2L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADS_MEMORYS_) ) {
      unsigned int c = _kids[0]->_cost[_LOADS_MEMORYS_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadS2L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__LOADUB_MEMORYB__LIMMILOW8) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__LOADUB_MEMORYB__LIMMILOW8]+MEMORY_REF_COST + 2*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadUB2L_limmI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadUB2L_limmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadUB2L_limmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadUB2L_limmI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUB_MEMORYB_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUB_MEMORYB_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadUB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadUB2L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADB_MEMORYB_) ) {
      unsigned int c = _kids[0]->_cost[_LOADB_MEMORYB_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadB2L_rule, c+1)
      }
    }
}
void  State::_sub_Op_ConvL2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+DEFAULT_COST*8 + MEMORY_REF_COST*6;
        DFA_PRODUCTION__SET_VALID(REGD, convL2D_reg_slow_fxtof_rule, c)
    }
}
void  State::_sub_Op_ConvL2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL_IREGL_IMMI_32_63) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL_IREGL_IMMI_32_63] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, shrL_reg_imm6_L2I_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, shrL_reg_imm6_L2I_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, shrL_reg_imm6_L2I_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, shrL_reg_imm6_L2I_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, shrL_reg_imm6_L2I_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, shrL_reg_imm6_L2I_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, convL2I_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, convL2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, convL2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, convL2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, convL2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, convL2I_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CountedLoopEnd(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREG) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREG] + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchLoopEnd_rule, c)
    }
}
void  State::_sub_Op_CountLeadingZerosI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, countLeadingZerosI_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, countLeadingZerosI_rule, c+1)
    }
}
void  State::_sub_Op_CountLeadingZerosL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, countLeadingZerosL_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, countLeadingZerosL_rule, c+1)
    }
}
void  State::_sub_Op_CountTrailingZerosI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, countTrailingZerosI_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, countTrailingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, countTrailingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, countTrailingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, countTrailingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, countTrailingZerosI_rule, c+1)
    }
}
void  State::_sub_Op_CountTrailingZerosL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, countTrailingZerosL_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, countTrailingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, countTrailingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, countTrailingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, countTrailingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, countTrailingZerosL_rule, c+1)
    }
}
void  State::_sub_Op_CreateEx(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, CreateException_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP, CreateException_rule, c+1)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, CreateException_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, CreateException_rule, c+1+1)
    }
}
void  State::_sub_Op_DivD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, divD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_DivF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, divF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_DivI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], R0REGI) && STATE__VALID_CHILD(_kids[1], R2REGI) ) {
      unsigned int c = _kids[0]->_cost[R0REGI]+_kids[1]->_cost[R2REGI]+(2+71)*DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(R1REGI, divI_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGI, divI_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0REGI, divI_reg_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, divI_reg_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, divI_reg_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, divI_reg_reg_rule, c+1+1)
    }
}
void  State::_sub_Op_DivL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], R2R3REGL) && STATE__VALID_CHILD(_kids[1], R0R1REGL) ) {
      unsigned int c = _kids[0]->_cost[R2R3REGL]+_kids[1]->_cost[R0R1REGL]+DEFAULT_COST*71;
        DFA_PRODUCTION__SET_VALID(R0R1REGL, divL_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGL, divL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLD, divL_reg_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, divL_reg_reg_rule, c+1+1)
    }
}
void  State::_sub_Op_FastLock(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP]+100;
        DFA_PRODUCTION__SET_VALID(FLAGSREGP, cmpFastLock_rule, c)
    }
}
void  State::_sub_Op_FastUnlock(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP]+100;
        DFA_PRODUCTION__SET_VALID(FLAGSREGP, cmpFastUnlock_rule, c)
    }
}
void  State::_sub_Op_Goto(const Node *n){
    {
      unsigned int c = BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branch_rule, c)
    }
}
void  State::_sub_Op_Halt(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, ShouldNotReachHere_rule, c)
    }
}
void  State::_sub_Op_If(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], CMPOPL_COMMUTE) && STATE__VALID_CHILD(_kids[1], FLAGSREGL_LEGT) &&
        (
#line 11119 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
 _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt || _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le 
#line 5389 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPL_COMMUTE]+_kids[1]->_cost[FLAGSREGL_LEGT] + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchConL_LEGT_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPL) && STATE__VALID_CHILD(_kids[1], FLAGSREGL_EQNE) &&
        (
#line 11105 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
 _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne 
#line 5398 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPL]+_kids[1]->_cost[FLAGSREGL_EQNE] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchConL_EQNE_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPL) && STATE__VALID_CHILD(_kids[1], FLAGSREGL_LTGE) &&
        (
#line 11091 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
 _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge 
#line 5409 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPL]+_kids[1]->_cost[FLAGSREGL_LTGE] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchConL_LTGE_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPP) && STATE__VALID_CHILD(_kids[1], FLAGSREGP) ) {
      unsigned int c = _kids[0]->_cost[CMPOPP]+_kids[1]->_cost[FLAGSREGP] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchConP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPU) && STATE__VALID_CHILD(_kids[1], FLAGSREGU) ) {
      unsigned int c = _kids[0]->_cost[CMPOPU]+_kids[1]->_cost[FLAGSREGU] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchConU_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP0) && STATE__VALID_CHILD(_kids[1], FLAGSREG_EQNELTGE) &&
        (
#line 10993 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
 _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne || _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge
#line 5432 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP0]+_kids[1]->_cost[FLAGSREG_EQNELTGE] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchCon_EQNELTGE_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREG) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREG] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchCon_rule, c)
      }
    }
}
void  State::_sub_Op_Jump(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+350;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, jumpXtnd_rule, c)
    }
}
void  State::_sub_Op_LShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMU5] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, shlI_reg_imm5_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, shlI_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, shlI_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, shlI_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, shlI_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, shlI_reg_imm5_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, shlI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, shlI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, shlI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, shlI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, shlI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, shlI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI_IREGI_IREGI, _LShiftI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYS_) && STATE__VALID_CHILD(_kids[1], IMMI_16) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYS_]+_kids[1]->_cost[IMMI_16];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI__LOADI_MEMORYS__IMMI_16, _LShiftI__LoadI_memoryS__immI_16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYS_) && STATE__VALID_CHILD(_kids[1], IMMI_24) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYS_]+_kids[1]->_cost[IMMI_24];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI__LOADI_MEMORYS__IMMI_24, _LShiftI__LoadI_memoryS__immI_24_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_MEMORYB_) && STATE__VALID_CHILD(_kids[1], IMMI_24) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_MEMORYB_]+_kids[1]->_cost[IMMI_24];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI__LOADUS_MEMORYB__IMMI_24, _LShiftI__LoadUS_memoryB__immI_24_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADS_MEMORYS_) && STATE__VALID_CHILD(_kids[1], IMMI_24) ) {
      unsigned int c = _kids[0]->_cost[_LOADS_MEMORYS_]+_kids[1]->_cost[IMMI_24];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI__LOADS_MEMORYS__IMMI_24, _LShiftI__LoadS_memoryS__immI_24_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMU5]+1;
        DFA_PRODUCTION__SET_VALID(SHIFTEDX, shiftedX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMU5];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI_IREGI_IMMU5, _LShiftI_iRegI_immU5_rule, c)
    }
}
void  State::_sub_Op_LShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMU5] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, shlL_reg_imm5_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, shlL_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, shlL_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, shlL_reg_imm5_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMU6BIG) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMU6BIG] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, shlL_reg_imm6_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, shlL_reg_imm6_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, shlL_reg_imm6_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, shlL_reg_imm6_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, shlL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, shlL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, shlL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, shlL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYB) ) {
      unsigned int c = _kids[0]->_cost[MEMORYB];
        DFA_PRODUCTION__SET_VALID(_LOADB_MEMORYB_, _LoadB_memoryB__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYB) ) {
      unsigned int c = _kids[0]->_cost[MEMORYB] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadB_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, loadB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, loadB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, loadB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, loadB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, loadB_rule, c+1)
    }
}
void  State::_sub_Op_LoadUB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYB) ) {
      unsigned int c = _kids[0]->_cost[MEMORYB];
        DFA_PRODUCTION__SET_VALID(_LOADUB_MEMORYB_, _LoadUB_memoryB__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYB) ) {
      unsigned int c = _kids[0]->_cost[MEMORYB] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadUB_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, loadUB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, loadUB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, loadUB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, loadUB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, loadUB_rule, c+1)
    }
}
void  State::_sub_Op_LoadUS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYS) ) {
      unsigned int c = _kids[0]->_cost[MEMORYS];
        DFA_PRODUCTION__SET_VALID(_LOADUS_MEMORYS_, _LoadUS_memoryS__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYB) ) {
      unsigned int c = _kids[0]->_cost[MEMORYB];
        DFA_PRODUCTION__SET_VALID(_LOADUS_MEMORYB_, _LoadUS_memoryB__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYS) ) {
      unsigned int c = _kids[0]->_cost[MEMORYS] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadUS_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, loadUS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, loadUS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, loadUS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, loadUS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, loadUS_rule, c+1)
    }
}
void  State::_sub_Op_LoadD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYD) ) {
      unsigned int c = _kids[0]->_cost[MEMORYD] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGD, loadD_rule, c)
    }
}
void  State::_sub_Op_LoadD_unaligned(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYF2) ) {
      unsigned int c = _kids[0]->_cost[MEMORYF2]+MEMORY_REF_COST*2+DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD_LOW, loadD_unaligned_rule, c)
        DFA_PRODUCTION__SET_VALID(REGD, loadD_unaligned_rule, c+1)
    }
}
void  State::_sub_Op_LoadF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYF) ) {
      unsigned int c = _kids[0]->_cost[MEMORYF] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGF, loadF_rule, c)
    }
}
void  State::_sub_Op_LoadI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYI];
        DFA_PRODUCTION__SET_VALID(_LOADI_MEMORYI_, _LoadI_memoryI__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYB) ) {
      unsigned int c = _kids[0]->_cost[MEMORYB];
        DFA_PRODUCTION__SET_VALID(_LOADI_MEMORYB_, _LoadI_memoryB__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYS) ) {
      unsigned int c = _kids[0]->_cost[MEMORYS];
        DFA_PRODUCTION__SET_VALID(_LOADI_MEMORYS_, _LoadI_memoryS__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadI_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, loadI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, loadI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, loadI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, loadI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, loadI_rule, c+1)
    }
}
void  State::_sub_Op_LoadKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, loadKlass_rule, c)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadKlass_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadKlass_rule, c+1)
    }
}
void  State::_sub_Op_LoadL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYD) &&
        (
#line 4733 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
((LoadLNode*)n)->require_atomic_access()
#line 5676 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYD] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, loadL_volatile_fp_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, loadL_volatile_fp_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadL_volatile_fp_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadL_volatile_fp_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) &&
        (
#line 4717 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
((LoadLNode*)n)->require_atomic_access()
#line 5688 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadL_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadL_volatile_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadL_volatile_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadL_volatile_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYLONG) &&
        (
#line 4694 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
!((LoadLNode*)n)->require_atomic_access()
#line 5708 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYLONG]+MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadL_2instr_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadL_2instr_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadL_2instr_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadL_2instr_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYL) &&
        (
#line 4678 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
!((LoadLNode*)n)->require_atomic_access()
#line 5728 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYL] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLD, loadL_rule, c)
      }
    }
}
void  State::_sub_Op_LoadL_unaligned(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYLONG) ) {
      unsigned int c = _kids[0]->_cost[MEMORYLONG] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, loadL_unaligned_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, loadL_unaligned_rule, c+1)
    }
}
void  State::_sub_Op_LoadPLocked(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, loadPLocked_rule, c)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadPLocked_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadPLocked_rule, c+1)
    }
}
void  State::_sub_Op_LoadP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYP) ) {
      unsigned int c = _kids[0]->_cost[MEMORYP] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, loadP_rule, c)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadP_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadP_rule, c+1)
    }
}
void  State::_sub_Op_LoadRange(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadRange_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, loadRange_rule, c+1)
    }
}
void  State::_sub_Op_LoadS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYS) ) {
      unsigned int c = _kids[0]->_cost[MEMORYS];
        DFA_PRODUCTION__SET_VALID(_LOADS_MEMORYS_, _LoadS_memoryS__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYS) ) {
      unsigned int c = _kids[0]->_cost[MEMORYS] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadS_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, loadS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, loadS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, loadS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, loadS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, loadS_rule, c+1)
    }
}
void  State::_sub_Op_MaxI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(IREGI, maxI_eReg_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, maxI_eReg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, maxI_eReg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, maxI_eReg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, maxI_eReg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, maxI_eReg_rule, c+1)
    }
}
void  State::_sub_Op_MemBarAcquire(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_acquire_rule, c)
    }
}
void  State::_sub_Op_LoadFence(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_acquire_0_rule, c)
    }
}
void  State::_sub_Op_MemBarAcquireLock(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_acquire_lock_rule, c)
    }
}
void  State::_sub_Op_MemBarRelease(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_release_rule, c)
    }
}
void  State::_sub_Op_StoreFence(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_release_0_rule, c)
    }
}
void  State::_sub_Op_MemBarReleaseLock(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_release_lock_rule, c)
    }
}
void  State::_sub_Op_MemBarVolatile(const Node *n){
    if(         (
#line 5874 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
Matcher::post_store_load_barrier(n)
#line 5880 "dfa_arm.cpp"
) ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, unnecessary_membar_volatile_rule, c)
    }
    {
      unsigned int c = 4*MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_volatile_rule, c)
      }
    }
}
void  State::_sub_Op_MemBarStoreStore(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_storestore_rule, c)
    }
}
void  State::_sub_Op_MinI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(IREGI, minI_eReg_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, minI_eReg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, minI_eReg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, minI_eReg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, minI_eReg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, minI_eReg_rule, c+1)
    }
}
void  State::_sub_Op_ModI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], R0REGI) && STATE__VALID_CHILD(_kids[1], R2REGI) ) {
      unsigned int c = _kids[0]->_cost[R0REGI]+_kids[1]->_cost[R2REGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(R0REGI, modI_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGI, modI_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, modI_reg_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, modI_reg_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, modI_reg_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, modI_reg_reg_rule, c+1+1)
    }
}
void  State::_sub_Op_ModL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], R2R3REGL) && STATE__VALID_CHILD(_kids[1], R0R1REGL) ) {
      unsigned int c = _kids[0]->_cost[R2R3REGL]+_kids[1]->_cost[R0R1REGL] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(R0R1REGL, modL_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGL, modL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLD, modL_reg_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, modL_reg_reg_rule, c+1+1)
    }
}
void  State::_sub_Op_MoveI2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGF, MoveI2F_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MoveF2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, MoveF2I_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, MoveF2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, MoveF2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, MoveF2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, MoveF2I_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, MoveF2I_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_MoveL2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGD, MoveL2D_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MoveD2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, MoveD2L_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, MoveD2L_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, MoveD2L_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, MoveD2L_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_MulD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, mulD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MulF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, mulF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MulI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, mulI_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, mulI_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, mulI_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, mulI_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, mulI_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, mulI_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_MulL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, mulL_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, mulL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, mulL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, mulL_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_NegD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, negD_reg_rule, c)
    }
}
void  State::_sub_Op_NegF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, negF_reg_rule, c)
    }
}
void  State::_sub_Op_OrI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], LIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[LIMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, orI_reg_limm_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, orI_reg_limm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, orI_reg_limm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, orI_reg_limm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, orI_reg_limm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, orI_reg_limm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orshrI_reg_reg_imm_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orshrI_reg_reg_imm_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orshrI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orshrI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orshrI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orshrI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orshrI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orshrI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orsarI_reg_reg_imm_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orsarI_reg_reg_imm_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orsarI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orsarI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orsarI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orsarI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orsarI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orsarI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orshlI_reg_reg_imm_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orshlI_reg_reg_imm_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orshlI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orshlI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orshlI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orshlI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orshlI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orshlI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, orI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_OrL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOWROT] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, orL_reg_immRot_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, orL_reg_immRot_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, orL_reg_immRot_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, orL_reg_immRot_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, orL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, orL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_PartialSubtypeCheck(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], R1REGP) && STATE__VALID_CHILD(_kids[1], R2REGP) ) {
      unsigned int c = _kids[0]->_cost[R1REGP]+_kids[1]->_cost[R2REGP]+DEFAULT_COST*10;
        DFA_PRODUCTION__SET_VALID(R0REGP, partialSubtypeCheck_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, partialSubtypeCheck_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(R1REGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, partialSubtypeCheck_rule, c+1+1)
    }
}
void  State::_sub_Op_PopCountI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12068 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
UsePopCountInstruction
#line 6347 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, popCountI_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, popCountI_rule, c+1)
    }
}
void  State::_sub_Op_PopCountL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) &&
        (
#line 12116 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
UsePopCountInstruction
#line 6363 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, popCountL_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, popCountL_rule, c+1)
    }
}
void  State::_sub_Op_PrefetchAllocation(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYP) &&
        (
#line 5280 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
!os::is_MP()
#line 6379 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYP] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, prefetchAlloc_sp_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYP) &&
        (
#line 5263 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
os::is_MP()
#line 6388 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYP] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, prefetchAlloc_mp_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMU5] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, sarI_reg_imm5_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, sarI_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, sarI_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, sarI_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, sarI_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, sarI_reg_imm5_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, sarI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, sarI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, sarI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, sarI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, sarI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, sarI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMU5];
        DFA_PRODUCTION__SET_VALID(_RSHIFTI_IREGI_IMMU5, _RShiftI_iRegI_immU5_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_RSHIFTI_IREGI_IREGI, _RShiftI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI__LOADI_MEMORYS__IMMI_16) && STATE__VALID_CHILD(_kids[1], IMMI_16) &&
        /*sixteen*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI__LOADI_MEMORYS__IMMI_16]+_kids[1]->_cost[IMMI_16] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, loadI2S_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, loadI2S_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, loadI2S_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, loadI2S_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, loadI2S_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, loadI2S_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI__LOADI_MEMORYS__IMMI_24) && STATE__VALID_CHILD(_kids[1], IMMI_24) &&
        /*twentyfour*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI__LOADI_MEMORYS__IMMI_24]+_kids[1]->_cost[IMMI_24] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, loadI2B_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, loadI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, loadI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, loadI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, loadI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, loadI2B_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI__LOADUS_MEMORYB__IMMI_24) && STATE__VALID_CHILD(_kids[1], IMMI_24) &&
        /*twentyfour*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI__LOADUS_MEMORYB__IMMI_24]+_kids[1]->_cost[IMMI_24] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, loadUS2B_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, loadUS2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, loadUS2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, loadUS2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, loadUS2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, loadUS2B_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI__LOADS_MEMORYS__IMMI_24) && STATE__VALID_CHILD(_kids[1], IMMI_24) &&
        /*twentyfour*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI__LOADS_MEMORYS__IMMI_24]+_kids[1]->_cost[IMMI_24] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, loadS2B_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, loadS2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, loadS2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, loadS2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, loadS2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, loadS2B_rule, c+1)
      }
    }
}
void  State::_sub_Op_RShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI_32_63) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI_32_63];
        DFA_PRODUCTION__SET_VALID(_RSHIFTL_IREGL_IMMI_32_63, _RShiftL_iRegL_immI_32_63_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMU5] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, sarL_reg_imm5_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, sarL_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, sarL_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, sarL_reg_imm5_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMU6BIG) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMU6BIG] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, sarL_reg_imm6_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, sarL_reg_imm6_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, sarL_reg_imm6_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, sarL_reg_imm6_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, sarL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, sarL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, sarL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, sarL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_Rethrow(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, RethrowException_rule, c)
    }
}
void  State::_sub_Op_Return(const Node *n){
    {
      unsigned int c = DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, Ret_rule, c)
    }
}
void  State::_sub_Op_SafePoint(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, safePoint_poll_rule, c)
    }
}
void  State::_sub_Op_SqrtD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, sqrtD_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVF2D_REGF_) ) {
      unsigned int c = _kids[0]->_cost[_CONVF2D_REGF_];
        DFA_PRODUCTION__SET_VALID(_SQRTD__CONVF2D_REGF__, _SqrtD__ConvF2D_regF___rule, c)
    }
}
void  State::_sub_Op_StoreB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYB) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYB]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeB_rule, c)
    }
}
void  State::_sub_Op_StoreC(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYS) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYS]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeC_rule, c)
    }
}
void  State::_sub_Op_StoreCM(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYB) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYB]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeCM_rule, c)
    }
}
void  State::_sub_Op_StorePConditional(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 7182 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
_kids[1]->_kids[0]->_leaf->Opcode() == Op_LoadPLocked
#line 6618 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[_BINARY_IREGP_IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGP, storePConditional_rule, c)
    }
}
void  State::_sub_Op_StoreIConditional(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYEX) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYEX]+_kids[1]->_cost[_BINARY_IREGI_IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, storeXConditional_rule, c)
    }
}
void  State::_sub_Op_StoreD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[MEMORYD]+_kids[1]->_cost[REGD] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeD_rule, c)
    }
}
void  State::_sub_Op_StoreF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[MEMORYF]+_kids[1]->_cost[REGF] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeF_rule, c)
    }
}
void  State::_sub_Op_StoreI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYI]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeI_rule, c)
    }
}
void  State::_sub_Op_StoreL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYD) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 5464 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
((StoreLNode*)n)->require_atomic_access()
#line 6653 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYD]+_kids[1]->_cost[IREGL] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeL_volatile_fp_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 5447 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
((StoreLNode*)n)->require_atomic_access()
#line 6662 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGL] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeL_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYLONG) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 5429 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
!((StoreLNode*)n)->require_atomic_access()
#line 6673 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYLONG]+_kids[1]->_cost[IREGL]+MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeL_2instr_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYL) && STATE__VALID_CHILD(_kids[1], IREGLD) &&
        (
#line 5413 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
!((StoreLNode*)n)->require_atomic_access()
#line 6684 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYL]+_kids[1]->_cost[IREGLD] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeL_rule, c)
      }
    }
}
void  State::_sub_Op_StoreP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYP) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[MEMORYP]+_kids[1]->_cost[IREGP] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeP_rule, c)
    }
}
void  State::_sub_Op_SubD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, subD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_SubF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, subF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_SubI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_SUBI_IREGI_IREGI, _SubI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMIROT) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IMMIROT]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, subI_immRot_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, subI_immRot_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, subI_immRot_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, subI_immRot_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, subI_immRot_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, subI_immRot_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], AIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[AIMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subI_reg_aimmI_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, subI_reg_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, subI_reg_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, subI_reg_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, subI_reg_aimmI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, subI_reg_aimmI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, rsbshrI_reg_imm_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, rsbshrI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, rsbshrI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, rsbshrI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, rsbshrI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, rsbshrI_reg_imm_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, rsbshrI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, rsbshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, rsbshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, rsbshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, rsbshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, rsbshrI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, rsbsarI_reg_imm_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, rsbsarI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, rsbsarI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, rsbsarI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, rsbsarI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, rsbsarI_reg_imm_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, rsbsarI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, rsbsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, rsbsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, rsbsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, rsbsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, rsbsarI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, rsbshlI_reg_imm_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, rsbshlI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, rsbshlI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, rsbshlI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, rsbshlI_reg_imm_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, rsbshlI_reg_imm_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, rsbshlI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, rsbshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, rsbshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, rsbshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, rsbshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, rsbshlI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subshrI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, subshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, subshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, subshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, subshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, subshrI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subshrI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, subshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, subshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, subshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, subshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, subshrI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subsarI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, subsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, subsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, subsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, subsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, subsarI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subsarI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, subsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, subsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, subsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, subsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, subsarI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subshlI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, subshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, subshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, subshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, subshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, subshlI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subshlI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, subshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, subshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, subshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, subshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, subshlI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, subI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_SubL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMML0) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMML0]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, negL_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, negL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, negL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, negL_reg_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOWROT] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, subL_reg_immRot_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, subL_reg_immRot_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, subL_reg_immRot_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, subL_reg_immRot_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, subL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, subL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_TailCall(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IPREGP) && STATE__VALID_CHILD(_kids[1], INLINE_CACHE_REGP) ) {
      unsigned int c = _kids[0]->_cost[IPREGP]+_kids[1]->_cost[INLINE_CACHE_REGP] + CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, TailCalljmpInd_rule, c)
    }
}
void  State::_sub_Op_TailJump(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IPREGP) && STATE__VALID_CHILD(_kids[1], REXCEPTIONREGP) ) {
      unsigned int c = _kids[0]->_cost[IPREGP]+_kids[1]->_cost[REXCEPTIONREGP] + CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, tailjmpInd_rule, c)
    }
}
void  State::_sub_Op_ThreadLocal(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(RTHREADREGP, tlsLoadP_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP, tlsLoadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(SP_PTR_REGP, tlsLoadP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, tlsLoadP_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYI, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYP, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYF2, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYD, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYFP, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYB, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYS, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYL, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYEX, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYLONG, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYVLD, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(R0REGP, tlsLoadP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R1REGP, tlsLoadP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(R2REGP, tlsLoadP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REXCEPTIONREGP, tlsLoadP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(IPREGP, tlsLoadP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(LRREGP, tlsLoadP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, tlsLoadP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, tlsLoadP_rule, c+1+1)
    }
}
void  State::_sub_Op_URShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X_IREGP_) && STATE__VALID_CHILD(_kids[1], IMMU5) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X_IREGP_]+_kids[1]->_cost[IMMU5] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, shrP_reg_imm5_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, shrP_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, shrP_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, shrP_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, shrP_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, shrP_reg_imm5_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, shrI_reg_imm5_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, shrI_reg_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, shrI_reg_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, shrI_reg_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, shrI_reg_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, shrI_reg_imm5_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, shrI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, shrI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, shrI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, shrI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, shrI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, shrI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMU5];
        DFA_PRODUCTION__SET_VALID(_URSHIFTI_IREGI_IMMU5, _URShiftI_iRegI_immU5_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_URSHIFTI_IREGI_IREGI, _URShiftI_iRegI_iRegI_rule, c)
    }
}
void  State::_sub_Op_URShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMU5] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, shrL_reg_imm5_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, shrL_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, shrL_reg_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, shrL_reg_imm5_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMU6BIG) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMU6BIG] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, shrL_reg_imm6_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, shrL_reg_imm6_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, shrL_reg_imm6_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, shrL_reg_imm6_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, shrL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, shrL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, shrL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, shrL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_XorI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], LIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[LIMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, xorI_reg_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(R0REGI, xorI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R1REGI, xorI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2REGI, xorI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R3REGI, xorI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R12REGI, xorI_reg_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorshrI_reg_reg_imm_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorshrI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorshrI_reg_reg_imm_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorshrI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorshrI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorshrI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorshrI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorshrI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorshrI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_URSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorshrI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorshrI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorshrI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorsarI_reg_reg_imm_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorsarI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorsarI_reg_reg_imm_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorsarI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorsarI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorsarI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorsarI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorsarI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorsarI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_RSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorsarI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorsarI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorsarI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IMMU5) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IMMU5]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorshlI_reg_reg_imm_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorshlI_reg_reg_imm_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorshlI_reg_reg_imm_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IMMU5) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IMMU5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorshlI_reg_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorshlI_reg_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorshlI_reg_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorshlI_reg_reg_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorshlI_reg_reg_reg_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorshlI_reg_reg_reg_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LSHIFTI_IREGI_IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorshlI_reg_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorshlI_reg_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorshlI_reg_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(R0REGI) || _cost[R0REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R1REGI) || _cost[R1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R1REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2REGI) || _cost[R2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R3REGI) || _cost[R3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R3REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R12REGI) || _cost[R12REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(R12REGI, xorI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_XorL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOWROT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOWROT] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, xorL_reg_immRot_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLD, xorL_reg_immRot_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R0R1REGL, xorL_reg_immRot_rule, c+1)
        DFA_PRODUCTION__SET_VALID(R2R3REGL, xorL_reg_immRot_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, xorL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGLD) || _cost[IREGLD] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLD, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R0R1REGL) || _cost[R0R1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R0R1REGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(R2R3REGL) || _cost[R2R3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(R2R3REGL, xorL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_AddVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 12769 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 16
#line 7512 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vadd16B_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 12756 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 7521 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vadd8B_reg_rule, c)
    }
}
void  State::_sub_Op_AddVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 12796 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 7532 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vadd8S_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 12783 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 7541 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vadd4S_reg_rule, c)
    }
}
void  State::_sub_Op_AddVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 12823 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 7552 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vadd4I_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 12810 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 7561 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vadd2I_reg_rule, c)
    }
}
void  State::_sub_Op_AddVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 12837 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 7572 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vadd2L_reg_rule, c)
    }
}
void  State::_sub_Op_AddVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 12911 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4 && !VM_Version::simd_math_is_compliant()
#line 7583 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*4;
        DFA_PRODUCTION__SET_VALID(VECX, vadd4F_reg_vfp_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 12884 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4 && VM_Version::simd_math_is_compliant()
#line 7592 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vadd4F_reg_simd_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 12865 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2 && !VM_Version::simd_math_is_compliant()
#line 7603 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECD, vadd2F_reg_vfp_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 12851 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2 && VM_Version::simd_math_is_compliant()
#line 7612 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, vadd2F_reg_rule, c)
      }
    }
}
void  State::_sub_Op_AddVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 12944 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 7625 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECX, vadd2D_reg_vfp_rule, c)
    }
}
void  State::_sub_Op_SubVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 12983 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 16
#line 7636 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsub16B_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 12970 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 7645 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vsub8B_reg_rule, c)
    }
}
void  State::_sub_Op_SubVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13010 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 7656 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsub16S_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 12997 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 7665 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vsub4S_reg_rule, c)
    }
}
void  State::_sub_Op_SubVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13037 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 7676 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsub4I_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13024 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 7685 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vsub2I_reg_rule, c)
    }
}
void  State::_sub_Op_SubVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13051 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 7696 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsub2L_reg_rule, c)
    }
}
void  State::_sub_Op_SubVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13131 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4 && !VM_Version::simd_math_is_compliant()
#line 7707 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*4;
        DFA_PRODUCTION__SET_VALID(VECX, vsub4F_reg_vfp_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13104 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4 && VM_Version::simd_math_is_compliant()
#line 7716 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsub4F_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13079 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2 && !VM_Version::simd_math_is_compliant()
#line 7727 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECD, vsub2F_reg_vfp_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13065 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2 && VM_Version::simd_math_is_compliant()
#line 7736 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, vsub2F_reg_rule, c)
      }
    }
}
void  State::_sub_Op_SubVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13164 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 7749 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECX, vsub2D_reg_vfp_rule, c)
    }
}
void  State::_sub_Op_MulVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13201 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 7760 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vmul8S_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13189 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 7769 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vmul4S_reg_rule, c)
    }
}
void  State::_sub_Op_MulVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13226 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 7780 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vmul4I_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13214 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 7789 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vmul2I_reg_rule, c)
    }
}
void  State::_sub_Op_MulVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13284 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4 && !VM_Version::simd_math_is_compliant()
#line 7800 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*4;
        DFA_PRODUCTION__SET_VALID(VECX, vmul4F_reg_vfp_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13271 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4 && VM_Version::simd_math_is_compliant()
#line 7809 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vmul4F_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13252 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2 && !VM_Version::simd_math_is_compliant()
#line 7820 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECD, vmul2F_reg_vfp_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13239 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2 && VM_Version::simd_math_is_compliant()
#line 7829 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, vmul2F_reg_rule, c)
      }
    }
}
void  State::_sub_Op_MulVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13335 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 7842 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECX, vmul2D_reg_vfp_rule, c)
    }
}
void  State::_sub_Op_DivVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13392 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 7853 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*4;
        DFA_PRODUCTION__SET_VALID(VECX, vdiv4F_reg_vfp_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13360 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 7862 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECD, vdiv2F_reg_vfp_rule, c)
    }
}
void  State::_sub_Op_DivVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13456 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 7873 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECX, vdiv2D_reg_vfp_rule, c)
    }
}
void  State::_sub_Op_LShiftCntV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 13522 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd()
#line 7884 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vslcntX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 13512 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd()
#line 7893 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vslcntD_rule, c)
    }
}
void  State::_sub_Op_RShiftCntV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 13552 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd()
#line 7904 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECX, vsrcntX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 13534 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd()
#line 7913 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECD, vsrcntD_rule, c)
    }
}
void  State::_sub_Op_LShiftVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13724 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 16
#line 7924 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsl16B_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13708 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 7933 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vsl8B_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13698 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 16
#line 7942 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsl16B_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13688 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 7953 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, vsl8B_reg_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13779 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 7966 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsl8S_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13763 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 7975 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vsl4S_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13752 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 7984 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsl8S_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13741 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 7995 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, vsl4S_reg_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13834 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4 && VM_Version::has_simd()
#line 8008 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsl4I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13818 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2 && VM_Version::has_simd()
#line 8017 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vsl2I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13807 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4 && VM_Version::has_simd()
#line 8026 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsl4I_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13796 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2 && VM_Version::has_simd()
#line 8037 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, vsl2I_reg_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13862 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8050 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsl2L_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13851 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8059 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsl2L_reg_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 14123 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 16
#line 8072 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsrl16B_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 14107 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 8081 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vsrl8B_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 14097 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 16
#line 8090 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsrl16B_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 14087 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 8101 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, vsra8B_reg_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 14176 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 8114 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsra8S_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 14160 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 8123 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vsra4S_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 14150 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 8132 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsra8S_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 14140 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 8143 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, vsra4S_reg_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 14229 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 8156 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsra4I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 14213 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8165 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vsra2I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 14203 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 8174 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsra4I_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 14193 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8185 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, vsra2I_reg_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 14256 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8198 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsra2L_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 14246 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8207 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsra2L_reg_rule, c)
      }
    }
}
void  State::_sub_Op_URShiftVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13901 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 8220 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsrl8S_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13885 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 8229 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vsrl4S_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13752 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 8238 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsl8S_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13741 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 8249 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, vsl4S_reg_0_rule, c)
      }
    }
}
void  State::_sub_Op_URShiftVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13934 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4 && VM_Version::has_simd()
#line 8262 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsrl4I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13918 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2 && VM_Version::has_simd()
#line 8271 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vsrl2I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13807 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4 && VM_Version::has_simd()
#line 8280 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsl4I_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 13796 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2 && VM_Version::has_simd()
#line 8291 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, vsl2I_reg_0_rule, c)
      }
    }
}
void  State::_sub_Op_URShiftVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 13951 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8304 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vsrl2L_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13851 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8313 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX]+DEFAULT_COST*1;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, vsl2L_reg_0_rule, c)
      }
    }
}
void  State::_sub_Op_AndV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 14286 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16
#line 8326 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vandX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 14274 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8
#line 8335 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vandD_rule, c)
    }
}
void  State::_sub_Op_OrV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 14312 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16
#line 8346 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vorX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 14300 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8
#line 8355 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vorD_rule, c)
    }
}
void  State::_sub_Op_XorV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 14338 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16
#line 8366 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, vxorX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 14326 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8
#line 8375 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECD]+_kids[1]->_cost[VECD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, vxorD_rule, c)
    }
}
void  State::_sub_Op_LoadVector(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYVLD) &&
        (
#line 12240 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_LoadVector()->memory_size() == 16
#line 8386 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYVLD] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(VECX, loadV16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYD) &&
        (
#line 12227 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_LoadVector()->memory_size() == 8
#line 8395 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYD] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(VECD, loadV8_rule, c)
    }
}
void  State::_sub_Op_StoreVector(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYVLD) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 12266 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_StoreVector()->memory_size() == 16
#line 8406 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYVLD]+_kids[1]->_cost[VECX] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeV16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYD) && STATE__VALID_CHILD(_kids[1], VECD) &&
        (
#line 12253 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_StoreVector()->memory_size() == 8
#line 8415 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYD]+_kids[1]->_cost[VECD] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeV8_rule, c)
      }
    }
}
void  State::_sub_Op_ReplicateB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMU8) &&
        (
#line 12365 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd()
#line 8428 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMU8] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, Repl16B_immU8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMU8) &&
        (
#line 12350 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd()
#line 8437 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMU8] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, Repl8B_immU8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI) &&
        (
#line 12334 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 8446 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl8B_immI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12318 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16
#line 8457 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, Repl16B_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12303 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd()
#line 8468 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl8B_reg_simd_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12280 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 8
#line 8479 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+DEFAULT_COST*4;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl8B_reg_rule, c)
      }
    }
}
void  State::_sub_Op_ReplicateS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMU8) &&
        (
#line 12464 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd()
#line 8492 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMU8] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, Repl8S_immU8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMU8) &&
        (
#line 12449 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd()
#line 8501 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMU8] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, Repl4S_immU8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI) &&
        (
#line 12434 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 8510 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI]+DEFAULT_COST*4;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl4S_immI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12417 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd()
#line 8521 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, Repl8S_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12402 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd()
#line 8532 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl4S_reg_simd_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12381 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 8543 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl4S_reg_rule, c)
      }
    }
}
void  State::_sub_Op_ReplicateI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMU8) &&
        (
#line 12574 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd()
#line 8556 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMU8] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, Repl4I_immU8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMU8) &&
        (
#line 12559 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd()
#line 8565 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMU8] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECD, Repl2I_immU8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI) &&
        (
#line 12544 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8574 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI]+DEFAULT_COST*4;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl2I_immI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12527 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd()
#line 8585 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, Repl4I_reg_simd_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12512 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd()
#line 8596 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl2I_reg_simd_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12493 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 8607 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, Repl4I_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12480 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8618 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl2I_reg_rule, c)
      }
    }
}
void  State::_sub_Op_ReplicateL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) &&
        (
#line 12606 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8631 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECX, Repl2L_reg_rule, c)
    }
}
void  State::_sub_Op_ReplicateF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMF) &&
        (
#line 12705 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8642 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMF]+DEFAULT_COST*4;
        DFA_PRODUCTION__SET_VALID(VECD, Repl2F_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 12689 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd()
#line 8651 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, Repl4F_reg_simd_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 12668 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 4
#line 8660 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, Repl4F_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 12652 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd()
#line 8671 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl2F_reg_simd_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 12637 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8682 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl2F_reg_vfp_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 12624 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8693 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECD) || _cost[VECD] > c) {
        DFA_PRODUCTION__SET_VALID(VECD, Repl2F_regI_rule, c)
      }
    }
}
void  State::_sub_Op_ReplicateD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) &&
        (
#line 12732 "/build/jdk/openjdk-jdk9-jdk9/hotspot/src/cpu/arm/vm/arm.ad"
n->as_Vector()->length() == 2
#line 8706 "dfa_arm.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(VECX, Repl2D_reg_rule, c)
    }
}
bool State::DFA(int opcode, const Node *n) {
  switch(opcode) {
  case Op_RegI: { _sub_Op_RegI(n);
    break;
  }
  case Op_RegP: { _sub_Op_RegP(n);
    break;
  }
  case Op_RegF: { _sub_Op_RegF(n);
    break;
  }
  case Op_RegD: { _sub_Op_RegD(n);
    break;
  }
  case Op_RegL: { _sub_Op_RegL(n);
    break;
  }
  case Op_RegFlags: { _sub_Op_RegFlags(n);
    break;
  }
  case Op_VecD: { _sub_Op_VecD(n);
    break;
  }
  case Op_VecX: { _sub_Op_VecX(n);
    break;
  }
  case Op_AbsD: { _sub_Op_AbsD(n);
    break;
  }
  case Op_AbsF: { _sub_Op_AbsF(n);
    break;
  }
  case Op_AddD: { _sub_Op_AddD(n);
    break;
  }
  case Op_AddF: { _sub_Op_AddF(n);
    break;
  }
  case Op_AddI: { _sub_Op_AddI(n);
    break;
  }
  case Op_AddL: { _sub_Op_AddL(n);
    break;
  }
  case Op_AddP: { _sub_Op_AddP(n);
    break;
  }
  case Op_AndI: { _sub_Op_AndI(n);
    break;
  }
  case Op_AndL: { _sub_Op_AndL(n);
    break;
  }
  case Op_Binary: { _sub_Op_Binary(n);
    break;
  }
  case Op_Bool: { _sub_Op_Bool(n);
    break;
  }
  case Op_ReverseBytesI: { _sub_Op_ReverseBytesI(n);
    break;
  }
  case Op_ReverseBytesL: { _sub_Op_ReverseBytesL(n);
    break;
  }
  case Op_ReverseBytesUS: { _sub_Op_ReverseBytesUS(n);
    break;
  }
  case Op_ReverseBytesS: { _sub_Op_ReverseBytesS(n);
    break;
  }
  case Op_CallDynamicJava: { _sub_Op_CallDynamicJava(n);
    break;
  }
  case Op_CallLeaf: { _sub_Op_CallLeaf(n);
    break;
  }
  case Op_CallLeafNoFP: { _sub_Op_CallLeafNoFP(n);
    break;
  }
  case Op_CallRuntime: { _sub_Op_CallRuntime(n);
    break;
  }
  case Op_CallStaticJava: { _sub_Op_CallStaticJava(n);
    break;
  }
  case Op_CastII: { _sub_Op_CastII(n);
    break;
  }
  case Op_CastX2P: { _sub_Op_CastX2P(n);
    break;
  }
  case Op_CastP2X: { _sub_Op_CastP2X(n);
    break;
  }
  case Op_CastPP: { _sub_Op_CastPP(n);
    break;
  }
  case Op_CheckCastPP: { _sub_Op_CheckCastPP(n);
    break;
  }
  case Op_ClearArray: { _sub_Op_ClearArray(n);
    break;
  }
  case Op_CMoveD: { _sub_Op_CMoveD(n);
    break;
  }
  case Op_CMoveF: { _sub_Op_CMoveF(n);
    break;
  }
  case Op_CMoveI: { _sub_Op_CMoveI(n);
    break;
  }
  case Op_CMoveL: { _sub_Op_CMoveL(n);
    break;
  }
  case Op_CMoveP: { _sub_Op_CMoveP(n);
    break;
  }
  case Op_CmpD: { _sub_Op_CmpD(n);
    break;
  }
  case Op_CmpD3: { _sub_Op_CmpD3(n);
    break;
  }
  case Op_CmpF: { _sub_Op_CmpF(n);
    break;
  }
  case Op_CmpF3: { _sub_Op_CmpF3(n);
    break;
  }
  case Op_CmpI: { _sub_Op_CmpI(n);
    break;
  }
  case Op_CmpL: { _sub_Op_CmpL(n);
    break;
  }
  case Op_CmpL3: { _sub_Op_CmpL3(n);
    break;
  }
  case Op_CmpLTMask: { _sub_Op_CmpLTMask(n);
    break;
  }
  case Op_CmpP: { _sub_Op_CmpP(n);
    break;
  }
  case Op_CmpU: { _sub_Op_CmpU(n);
    break;
  }
  case Op_CompareAndSwapI: { _sub_Op_CompareAndSwapI(n);
    break;
  }
  case Op_CompareAndSwapL: { _sub_Op_CompareAndSwapL(n);
    break;
  }
  case Op_CompareAndSwapP: { _sub_Op_CompareAndSwapP(n);
    break;
  }
  case Op_GetAndAddI: { _sub_Op_GetAndAddI(n);
    break;
  }
  case Op_GetAndAddL: { _sub_Op_GetAndAddL(n);
    break;
  }
  case Op_GetAndSetI: { _sub_Op_GetAndSetI(n);
    break;
  }
  case Op_GetAndSetL: { _sub_Op_GetAndSetL(n);
    break;
  }
  case Op_GetAndSetP: { _sub_Op_GetAndSetP(n);
    break;
  }
  case Op_ConN: { _sub_Op_ConN(n);
    break;
  }
  case Op_ConNKlass: { _sub_Op_ConNKlass(n);
    break;
  }
  case Op_ConD: { _sub_Op_ConD(n);
    break;
  }
  case Op_ConF: { _sub_Op_ConF(n);
    break;
  }
  case Op_ConI: { _sub_Op_ConI(n);
    break;
  }
  case Op_ConL: { _sub_Op_ConL(n);
    break;
  }
  case Op_ConP: { _sub_Op_ConP(n);
    break;
  }
  case Op_Conv2B: { _sub_Op_Conv2B(n);
    break;
  }
  case Op_ConvD2F: { _sub_Op_ConvD2F(n);
    break;
  }
  case Op_ConvD2I: { _sub_Op_ConvD2I(n);
    break;
  }
  case Op_ConvD2L: { _sub_Op_ConvD2L(n);
    break;
  }
  case Op_ConvF2D: { _sub_Op_ConvF2D(n);
    break;
  }
  case Op_ConvF2I: { _sub_Op_ConvF2I(n);
    break;
  }
  case Op_ConvF2L: { _sub_Op_ConvF2L(n);
    break;
  }
  case Op_ConvI2D: { _sub_Op_ConvI2D(n);
    break;
  }
  case Op_ConvI2F: { _sub_Op_ConvI2F(n);
    break;
  }
  case Op_ConvI2L: { _sub_Op_ConvI2L(n);
    break;
  }
  case Op_ConvL2D: { _sub_Op_ConvL2D(n);
    break;
  }
  case Op_ConvL2I: { _sub_Op_ConvL2I(n);
    break;
  }
  case Op_CountedLoopEnd: { _sub_Op_CountedLoopEnd(n);
    break;
  }
  case Op_CountLeadingZerosI: { _sub_Op_CountLeadingZerosI(n);
    break;
  }
  case Op_CountLeadingZerosL: { _sub_Op_CountLeadingZerosL(n);
    break;
  }
  case Op_CountTrailingZerosI: { _sub_Op_CountTrailingZerosI(n);
    break;
  }
  case Op_CountTrailingZerosL: { _sub_Op_CountTrailingZerosL(n);
    break;
  }
  case Op_CreateEx: { _sub_Op_CreateEx(n);
    break;
  }
  case Op_DivD: { _sub_Op_DivD(n);
    break;
  }
  case Op_DivF: { _sub_Op_DivF(n);
    break;
  }
  case Op_DivI: { _sub_Op_DivI(n);
    break;
  }
  case Op_DivL: { _sub_Op_DivL(n);
    break;
  }
  case Op_FastLock: { _sub_Op_FastLock(n);
    break;
  }
  case Op_FastUnlock: { _sub_Op_FastUnlock(n);
    break;
  }
  case Op_Goto: { _sub_Op_Goto(n);
    break;
  }
  case Op_Halt: { _sub_Op_Halt(n);
    break;
  }
  case Op_If: { _sub_Op_If(n);
    break;
  }
  case Op_Jump: { _sub_Op_Jump(n);
    break;
  }
  case Op_LShiftI: { _sub_Op_LShiftI(n);
    break;
  }
  case Op_LShiftL: { _sub_Op_LShiftL(n);
    break;
  }
  case Op_LoadB: { _sub_Op_LoadB(n);
    break;
  }
  case Op_LoadUB: { _sub_Op_LoadUB(n);
    break;
  }
  case Op_LoadUS: { _sub_Op_LoadUS(n);
    break;
  }
  case Op_LoadD: { _sub_Op_LoadD(n);
    break;
  }
  case Op_LoadD_unaligned: { _sub_Op_LoadD_unaligned(n);
    break;
  }
  case Op_LoadF: { _sub_Op_LoadF(n);
    break;
  }
  case Op_LoadI: { _sub_Op_LoadI(n);
    break;
  }
  case Op_LoadKlass: { _sub_Op_LoadKlass(n);
    break;
  }
  case Op_LoadL: { _sub_Op_LoadL(n);
    break;
  }
  case Op_LoadL_unaligned: { _sub_Op_LoadL_unaligned(n);
    break;
  }
  case Op_LoadPLocked: { _sub_Op_LoadPLocked(n);
    break;
  }
  case Op_LoadP: { _sub_Op_LoadP(n);
    break;
  }
  case Op_LoadRange: { _sub_Op_LoadRange(n);
    break;
  }
  case Op_LoadS: { _sub_Op_LoadS(n);
    break;
  }
  case Op_MaxI: { _sub_Op_MaxI(n);
    break;
  }
  case Op_MemBarAcquire: { _sub_Op_MemBarAcquire(n);
    break;
  }
  case Op_LoadFence: { _sub_Op_LoadFence(n);
    break;
  }
  case Op_MemBarAcquireLock: { _sub_Op_MemBarAcquireLock(n);
    break;
  }
  case Op_MemBarRelease: { _sub_Op_MemBarRelease(n);
    break;
  }
  case Op_StoreFence: { _sub_Op_StoreFence(n);
    break;
  }
  case Op_MemBarReleaseLock: { _sub_Op_MemBarReleaseLock(n);
    break;
  }
  case Op_MemBarVolatile: { _sub_Op_MemBarVolatile(n);
    break;
  }
  case Op_MemBarStoreStore: { _sub_Op_MemBarStoreStore(n);
    break;
  }
  case Op_MinI: { _sub_Op_MinI(n);
    break;
  }
  case Op_ModI: { _sub_Op_ModI(n);
    break;
  }
  case Op_ModL: { _sub_Op_ModL(n);
    break;
  }
  case Op_MoveI2F: { _sub_Op_MoveI2F(n);
    break;
  }
  case Op_MoveF2I: { _sub_Op_MoveF2I(n);
    break;
  }
  case Op_MoveL2D: { _sub_Op_MoveL2D(n);
    break;
  }
  case Op_MoveD2L: { _sub_Op_MoveD2L(n);
    break;
  }
  case Op_MulD: { _sub_Op_MulD(n);
    break;
  }
  case Op_MulF: { _sub_Op_MulF(n);
    break;
  }
  case Op_MulI: { _sub_Op_MulI(n);
    break;
  }
  case Op_MulL: { _sub_Op_MulL(n);
    break;
  }
  case Op_NegD: { _sub_Op_NegD(n);
    break;
  }
  case Op_NegF: { _sub_Op_NegF(n);
    break;
  }
  case Op_OrI: { _sub_Op_OrI(n);
    break;
  }
  case Op_OrL: { _sub_Op_OrL(n);
    break;
  }
  case Op_PartialSubtypeCheck: { _sub_Op_PartialSubtypeCheck(n);
    break;
  }
  case Op_PopCountI: { _sub_Op_PopCountI(n);
    break;
  }
  case Op_PopCountL: { _sub_Op_PopCountL(n);
    break;
  }
  case Op_PrefetchAllocation: { _sub_Op_PrefetchAllocation(n);
    break;
  }
  case Op_RShiftI: { _sub_Op_RShiftI(n);
    break;
  }
  case Op_RShiftL: { _sub_Op_RShiftL(n);
    break;
  }
  case Op_Rethrow: { _sub_Op_Rethrow(n);
    break;
  }
  case Op_Return: { _sub_Op_Return(n);
    break;
  }
  case Op_SafePoint: { _sub_Op_SafePoint(n);
    break;
  }
  case Op_SqrtD: { _sub_Op_SqrtD(n);
    break;
  }
  case Op_StoreB: { _sub_Op_StoreB(n);
    break;
  }
  case Op_StoreC: { _sub_Op_StoreC(n);
    break;
  }
  case Op_StoreCM: { _sub_Op_StoreCM(n);
    break;
  }
  case Op_StorePConditional: { _sub_Op_StorePConditional(n);
    break;
  }
  case Op_StoreIConditional: { _sub_Op_StoreIConditional(n);
    break;
  }
  case Op_StoreD: { _sub_Op_StoreD(n);
    break;
  }
  case Op_StoreF: { _sub_Op_StoreF(n);
    break;
  }
  case Op_StoreI: { _sub_Op_StoreI(n);
    break;
  }
  case Op_StoreL: { _sub_Op_StoreL(n);
    break;
  }
  case Op_StoreP: { _sub_Op_StoreP(n);
    break;
  }
  case Op_SubD: { _sub_Op_SubD(n);
    break;
  }
  case Op_SubF: { _sub_Op_SubF(n);
    break;
  }
  case Op_SubI: { _sub_Op_SubI(n);
    break;
  }
  case Op_SubL: { _sub_Op_SubL(n);
    break;
  }
  case Op_TailCall: { _sub_Op_TailCall(n);
    break;
  }
  case Op_TailJump: { _sub_Op_TailJump(n);
    break;
  }
  case Op_ThreadLocal: { _sub_Op_ThreadLocal(n);
    break;
  }
  case Op_URShiftI: { _sub_Op_URShiftI(n);
    break;
  }
  case Op_URShiftL: { _sub_Op_URShiftL(n);
    break;
  }
  case Op_XorI: { _sub_Op_XorI(n);
    break;
  }
  case Op_XorL: { _sub_Op_XorL(n);
    break;
  }
  case Op_AddVB: { _sub_Op_AddVB(n);
    break;
  }
  case Op_AddVS: { _sub_Op_AddVS(n);
    break;
  }
  case Op_AddVI: { _sub_Op_AddVI(n);
    break;
  }
  case Op_AddVL: { _sub_Op_AddVL(n);
    break;
  }
  case Op_AddVF: { _sub_Op_AddVF(n);
    break;
  }
  case Op_AddVD: { _sub_Op_AddVD(n);
    break;
  }
  case Op_SubVB: { _sub_Op_SubVB(n);
    break;
  }
  case Op_SubVS: { _sub_Op_SubVS(n);
    break;
  }
  case Op_SubVI: { _sub_Op_SubVI(n);
    break;
  }
  case Op_SubVL: { _sub_Op_SubVL(n);
    break;
  }
  case Op_SubVF: { _sub_Op_SubVF(n);
    break;
  }
  case Op_SubVD: { _sub_Op_SubVD(n);
    break;
  }
  case Op_MulVS: { _sub_Op_MulVS(n);
    break;
  }
  case Op_MulVI: { _sub_Op_MulVI(n);
    break;
  }
  case Op_MulVF: { _sub_Op_MulVF(n);
    break;
  }
  case Op_MulVD: { _sub_Op_MulVD(n);
    break;
  }
  case Op_DivVF: { _sub_Op_DivVF(n);
    break;
  }
  case Op_DivVD: { _sub_Op_DivVD(n);
    break;
  }
  case Op_LShiftCntV: { _sub_Op_LShiftCntV(n);
    break;
  }
  case Op_RShiftCntV: { _sub_Op_RShiftCntV(n);
    break;
  }
  case Op_LShiftVB: { _sub_Op_LShiftVB(n);
    break;
  }
  case Op_LShiftVS: { _sub_Op_LShiftVS(n);
    break;
  }
  case Op_LShiftVI: { _sub_Op_LShiftVI(n);
    break;
  }
  case Op_LShiftVL: { _sub_Op_LShiftVL(n);
    break;
  }
  case Op_RShiftVB: { _sub_Op_RShiftVB(n);
    break;
  }
  case Op_RShiftVS: { _sub_Op_RShiftVS(n);
    break;
  }
  case Op_RShiftVI: { _sub_Op_RShiftVI(n);
    break;
  }
  case Op_RShiftVL: { _sub_Op_RShiftVL(n);
    break;
  }
  case Op_URShiftVS: { _sub_Op_URShiftVS(n);
    break;
  }
  case Op_URShiftVI: { _sub_Op_URShiftVI(n);
    break;
  }
  case Op_URShiftVL: { _sub_Op_URShiftVL(n);
    break;
  }
  case Op_AndV: { _sub_Op_AndV(n);
    break;
  }
  case Op_OrV: { _sub_Op_OrV(n);
    break;
  }
  case Op_XorV: { _sub_Op_XorV(n);
    break;
  }
  case Op_LoadVector: { _sub_Op_LoadVector(n);
    break;
  }
  case Op_StoreVector: { _sub_Op_StoreVector(n);
    break;
  }
  case Op_ReplicateB: { _sub_Op_ReplicateB(n);
    break;
  }
  case Op_ReplicateS: { _sub_Op_ReplicateS(n);
    break;
  }
  case Op_ReplicateI: { _sub_Op_ReplicateI(n);
    break;
  }
  case Op_ReplicateL: { _sub_Op_ReplicateL(n);
    break;
  }
  case Op_ReplicateF: { _sub_Op_ReplicateF(n);
    break;
  }
  case Op_ReplicateD: { _sub_Op_ReplicateD(n);
    break;
  }
  
  default:
    tty->print("Default case invoked for: \n");
    tty->print("   opcode  = %d, \"%s\"\n", opcode, NodeClassNames[opcode]);
    return false;
  }
  return true;
}
