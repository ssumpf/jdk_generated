#line 1 "ad_arm_misc.cpp"
//
// Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//

// Machine Generated File.  Do Not Edit!

#include "precompiled.hpp"
#include "adfiles/ad_arm.hpp"
const RegMask &Nop_A0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &Nop_A1Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &Nop_MSNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &Nop_FANode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &Nop_BRNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &loadBNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadB2LNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadUBNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadUB2LNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadUB2L_limmINode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadSNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadS2BNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadS2LNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadUSNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadUS2BNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadUS2LNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadUS2L_immI_255Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadUS2L_limmINode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadINode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadI2BNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadI2UBNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadI2SNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadI2USNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadI2LNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadI2L_immI_255Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadI2L_immI_65535Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadI2L_limmU31Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadI2L_immU31Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadUI2LNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadLNode::out_RegMask() const { return (LONG_REG_ALIGN_mask()); }
const RegMask &loadL_2instrNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadL_volatileNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadL_volatile_fpNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadL_unalignedNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadRangeNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadPNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &loadKlassNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &loadDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &loadD_unalignedNode::out_RegMask() const { return (DFLT_LOW_REG_mask()); }
const RegMask &loadFNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &loadConINode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadConIMovNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadConIMovnNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadConI16Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadConPNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &loadConP_pollNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &loadConLNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadConL16Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadConF_imm8Node::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &loadConFNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &loadConD_imm8Node::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &loadConDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &prefetchAlloc_mpNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchAlloc_spNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeBNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeCMNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeCNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeINode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeLNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeL_2instrNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeL_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeL_volatile_fpNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storePNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeDNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeFNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_storestoreNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_acquireNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_acquire_0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_acquire_lockNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_releaseNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_release_0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_release_lockNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &unnecessary_membar_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &castX2PNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &castP2XNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovIP_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovIP_immMovNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovIP_imm16Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovI_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovI_immMovNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovII_imm16Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovII_reg_EQNELTGENode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovII_immMov_EQNELTGENode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovII_imm16_EQNELTGENode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovIIu_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovIIu_immMovNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovIIu_imm16Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovPP_regNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPP_immNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPI_regNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPI_reg_EQNELTGENode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPIu_regNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPI_immNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPI_imm_EQNELTGENode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPIu_immNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovFP_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &cmovFI_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &cmovFI_reg_EQNELTGENode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &cmovFIu_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &cmovDP_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &cmovDI_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &cmovDI_reg_EQNELTGENode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &cmovDIu_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &cmovLP_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLP_immRotNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLP_imm16Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLI_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLI_reg_EQNELTGENode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLI_immRotNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLI_immRot_EQNELTGENode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLI_imm16Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLI_imm16_EQNELTGENode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLIu_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &tlsLoadPNode::out_RegMask() const { return (RTHREAD_REGP_mask()); }
const RegMask &checkCastPPNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &castPPNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &castIINode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addI_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addshlI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addshlI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addshlI_reg_imm_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addshlI_reg_imm_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addsarI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addsarI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addsarI_reg_imm_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addsarI_reg_imm_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addshrI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addshrI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addshrI_reg_imm_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addshrI_reg_imm_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addI_reg_aimmINode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addP_reg_regNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &addshlP_reg_reg_immNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &addP_reg_aimmXNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &addL_reg_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &addL_reg_immRotNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &loadPLockedNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &storePConditionalNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &storeXConditionalNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compareAndSwapL_boolNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &compareAndSwapI_boolNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &compareAndSwapP_boolNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xaddI_aimmI_no_resNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &xaddI_reg_no_resNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &xaddI_aimmINode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xaddI_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xaddL_reg_no_resNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &xaddL_immRot_no_resNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &xaddL_regNode::out_RegMask() const { return (LONG_REG_ALIGN_mask()); }
const RegMask &xaddL_immRotNode::out_RegMask() const { return (LONG_REG_ALIGN_mask()); }
const RegMask &xchgINode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xchgLNode::out_RegMask() const { return (LONG_REG_ALIGN_mask()); }
const RegMask &xchgPNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &subI_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &subshlI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &subshlI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &subsarI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &subsarI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &subshrI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &subshrI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &rsbshlI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &rsbshlI_reg_imm_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &rsbsarI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &rsbsarI_reg_imm_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &rsbshrI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &rsbshrI_reg_imm_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &subI_reg_aimmINode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &subI_reg_immRotnegNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &subI_immRot_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &subL_reg_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &subL_reg_immRotNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &negL_reg_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &mulI_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &mulL_lo1_hi2Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &mulL_hi1_lo2Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &mulL_lo1_lo2Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &mulL_reg_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &divI_reg_regNode::out_RegMask() const { return (R1_REGI_mask()); }
const RegMask &divL_reg_regNode::out_RegMask() const { return (R0R1_REGL_mask()); }
const RegMask &modI_reg_regNode::out_RegMask() const { return (R0_REGI_mask()); }
const RegMask &modL_reg_regNode::out_RegMask() const { return (R0R1_REGL_mask()); }
const RegMask &shlI_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &shlI_reg_imm5Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &shlL_reg_reg_merge_hiNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shlL_reg_reg_merge_loNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shlL_reg_reg_overlapNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shlL_reg_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shlL_reg_imm6Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shlL_reg_imm5Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &sarI_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &sarI_reg_imm5Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &sarL_reg_reg_merge_loNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &sarL_reg_reg_merge_hiNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &sarL_reg_reg_overlapNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &sarL_reg_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &sarL_reg_imm6Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &sarL_reg_imm5Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shrI_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &shrI_reg_imm5Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &shrL_reg_reg_merge_loNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shrL_reg_reg_merge_hiNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shrL_reg_reg_overlapNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shrL_reg_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shrL_reg_imm6Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shrL_reg_imm5Node::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &shrP_reg_imm5Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &addF_reg_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &addD_reg_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &subF_reg_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &subD_reg_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &mulF_reg_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &mulD_reg_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &divF_reg_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &divD_reg_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &absD_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &absF_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &negF_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &negD_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &sqrtF_reg_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &sqrtD_reg_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &andI_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andshlI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andshlI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andshlI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andshlI_reg_reg_imm_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andsarI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andsarI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andsarI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andsarI_reg_reg_imm_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andshrI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andshrI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andshrI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andshrI_reg_reg_imm_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andI_reg_limmNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andI_reg_limmnNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &andL_reg_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &andL_reg_immRotNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &orI_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orshlI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orshlI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orshlI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orshlI_reg_reg_imm_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orsarI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orsarI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orsarI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orsarI_reg_reg_imm_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orshrI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orshrI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orshrI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orshrI_reg_reg_imm_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orI_reg_limmNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &orL_reg_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &orL_reg_immRotNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &xorI_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorshlI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorshlI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorshlI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorshlI_reg_reg_imm_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorsarI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorsarI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorsarI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorsarI_reg_reg_imm_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorshrI_reg_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorshrI_reg_reg_reg_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorshrI_reg_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorshrI_reg_reg_imm_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorI_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &xorL_reg_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &xorL_reg_immRotNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &convI2BNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &convP2BNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmpLTMask_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmpLTMask_reg_immNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMask3Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMask3_1Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMask3_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMask3_2Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMask4Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMask4_1Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMask4_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMask4_2Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMaskNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMask_1Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMask_0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cadd_cmpLTMask_2Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &convD2F_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &convD2I_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &convD2L_regNode::out_RegMask() const { return (R0R1_REGL_mask()); }
const RegMask &convF2D_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &convF2I_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &convF2L_regNode::out_RegMask() const { return (R0R1_REGL_mask()); }
const RegMask &convI2D_reg_regNode::out_RegMask() const { return (DFLT_LOW_REG_mask()); }
const RegMask &convI2F_reg_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &convI2L_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &convI2L_reg_zexNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &zerox_longNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &MoveF2I_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &MoveI2F_reg_regNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &MoveD2L_reg_regNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &MoveL2D_reg_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &loadConI_x43300000Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadConI_x41f00000Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadConI_x0Node::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &regDHi_regDLo_to_regDNode::out_RegMask() const { return (DFLT_LOW_REG_mask()); }
const RegMask &convI2D_regDHi_regDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &addD_regD_regDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &subD_regD_regDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &mulD_regD_regDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &regL_to_regDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &regI_regI_to_regDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &convL2D_reg_slow_fxtofNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &convL2I_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &shrL_reg_imm6_L2INode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &compI_iRegNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compU_iRegNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compI_iReg_immnegNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compI_iReg_immNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testI_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testshlI_reg_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testshlI_reg_reg_reg_0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testshlI_reg_reg_immNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testshlI_reg_reg_imm_0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testsarI_reg_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testsarI_reg_reg_reg_0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testsarI_reg_reg_immNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testsarI_reg_reg_imm_0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testshrI_reg_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testshrI_reg_reg_reg_0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testshrI_reg_reg_immNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testshrI_reg_reg_imm_0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testI_reg_immNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compL_reg_reg_LTGENode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compL_reg_reg_EQNENode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compL_reg_reg_LEGTNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compL_reg_con_LTGENode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compL_reg_con_EQNENode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compL_reg_con_LEGTNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compU_iReg_immNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compP_iRegPNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compP_iRegP_immNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmovI_reg_ltNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &minI_eRegNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovI_reg_gtNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &maxI_eRegNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmpF_ccNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpF0_ccNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpD_ccNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpD0_ccNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpF_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmpF0_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmpD_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmpD0_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &jumpXtndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchCon_EQNELTGENode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConUNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConPNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConL_LTGENode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConL_EQNENode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConL_LEGTNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchLoopEndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpL3_reg_regNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovLL_reg_LTGENode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLL_reg_EQNENode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLL_reg_LEGTNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLL_imm_LTGENode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLL_imm_EQNENode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovLL_imm_LEGTNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &cmovIL_reg_LTGENode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovIL_reg_EQNENode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovIL_reg_LEGTNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovIL_imm_LTGENode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovIL_imm_EQNENode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovIL_imm_LEGTNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &cmovPL_reg_LTGENode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPL_reg_EQNENode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPL_reg_LEGTNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPL_imm_LTGENode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPL_imm_EQNENode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovPL_imm_LEGTNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &cmovFL_reg_LTGENode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &cmovFL_reg_EQNENode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &cmovFL_reg_LEGTNode::out_RegMask() const { return (SFLT_REG_mask()); }
const RegMask &cmovDL_reg_LTGENode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &cmovDL_reg_EQNENode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &cmovDL_reg_LEGTNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &safePoint_pollNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallStaticJavaDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallStaticJavaHandleNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallDynamicJavaDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallRuntimeDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallLeafDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallLeafNoFPDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &TailCalljmpIndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &RetNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &tailjmpIndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CreateExceptionNode::out_RegMask() const { return (REXCEPTION_REGP_mask()); }
const RegMask &RethrowExceptionNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &ShouldNotReachHereNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &partialSubtypeCheckNode::out_RegMask() const { return (R0_REGP_mask()); }
const RegMask &cmpFastLockNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpFastUnlockNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &clear_arrayNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &countLeadingZerosINode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &countLeadingZerosLNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &countTrailingZerosINode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &countTrailingZerosLNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &popCountINode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &popCountLNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &bytes_reverse_intNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &bytes_reverse_longNode::out_RegMask() const { return (LONG_REG_mask()); }
const RegMask &bytes_reverse_unsigned_shortNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &bytes_reverse_shortNode::out_RegMask() const { return (INT_REG_mask()); }
const RegMask &loadV8Node::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &loadV16Node::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &storeV8Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeV16Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &Repl8B_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl8B_reg_simdNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl16B_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &Repl8B_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl8B_immU8Node::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl16B_immU8Node::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &Repl4S_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl4S_reg_simdNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl8S_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &Repl4S_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl4S_immU8Node::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl8S_immU8Node::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &Repl2I_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl4I_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &Repl2I_reg_simdNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl4I_reg_simdNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &Repl2I_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl2I_immU8Node::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl4I_immU8Node::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &Repl2L_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &Repl2F_regINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl2F_reg_vfpNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl2F_reg_simdNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl4F_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &Repl4F_reg_simdNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &Repl2F_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &Repl2D_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vadd8B_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vadd16B_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vadd4S_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vadd8S_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vadd2I_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vadd4I_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vadd2L_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vadd2F_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vadd2F_reg_vfpNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vadd4F_reg_simdNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vadd4F_reg_vfpNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vadd2D_reg_vfpNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsub8B_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsub16B_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsub4S_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsub16S_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsub2I_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsub4I_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsub2L_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsub2F_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsub2F_reg_vfpNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsub4F_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsub4F_reg_vfpNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsub2D_reg_vfpNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vmul4S_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vmul8S_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vmul2I_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vmul4I_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vmul2F_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vmul2F_reg_vfpNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vmul4F_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vmul4F_reg_vfpNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vmul2D_reg_vfpNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vdiv2F_reg_vfpNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vdiv4F_reg_vfpNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vdiv2D_reg_vfpNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vneg8B_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vneg16B_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vslcntDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vslcntXNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsrcntDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsrcntXNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsh8B_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsh16B_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsh4S_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsh8S_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsh2I_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsh4I_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsh2L_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsl8B_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsl16B_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsl8B_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsl16B_immINode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsl4S_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsl4S_reg_0Node::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsl8S_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsl8S_reg_0Node::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsl4S_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsl8S_immINode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsl2I_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsl2I_reg_0Node::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsl4I_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsl4I_reg_0Node::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsl2I_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsl4I_immINode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsl2L_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsl2L_reg_0Node::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsl2L_immINode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsrl4S_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsrl8S_immINode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsrl2I_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsrl4I_immINode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsrl2L_immINode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsha8B_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsha16B_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsha4S_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsha8S_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsha2I_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsha4I_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsha2L_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsra8B_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsrl16B_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsrl8B_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsrl16B_immINode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsra4S_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsra8S_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsra4S_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsra8S_immINode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsra2I_regNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsra4I_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsra2I_immINode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vsra4I_immINode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsra2L_regNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vsra2L_immINode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vandDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vandXNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vorDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vorXNode::out_RegMask() const { return (VECTORX_REG_mask()); }
const RegMask &vxorDNode::out_RegMask() const { return (ACTUAL_DFLT_REG_mask()); }
const RegMask &vxorXNode::out_RegMask() const { return (VECTORX_REG_mask()); }
// Check consistency of C++ compilation with ADLC options:
// Check adlc -DLINUX=1
#ifndef LINUX
#  error "LINUX must be defined"
#endif // LINUX
// Check adlc -D_GNU_SOURCE=1
#ifndef _GNU_SOURCE
#  error "_GNU_SOURCE must be defined"
#endif // _GNU_SOURCE
// Check adlc -DARM32=1
#ifndef ARM32
#  error "ARM32 must be defined"
#endif // ARM32
// Check adlc -U_LP64
#ifdef _LP64
#  error "_LP64 must not be defined"
#endif // _LP64
// Check adlc -DARM=1
#ifndef ARM
#  error "ARM must be defined"
#endif // ARM
